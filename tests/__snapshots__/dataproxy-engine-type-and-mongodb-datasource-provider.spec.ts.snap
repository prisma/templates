// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Blog 1`] = `
Object {
  "content": "generator client {
  provider = \\"prisma-client-js\\"
  engineType = \\"dataproxy\\"
  previewFeatures = [\\"dataproxy\\", \\"mongoDb\\"]
}

datasource db {
  provider = \\"mongodb\\"
  url      = env(\\"DATABASE_URL\\")
}

model Post {
  post_id   Int     @id @default(autoincrement())
  content   String?
  title     String
  author_id Int?
  author    User?   @relation(fields: [author_id], references: [user_id])
}

model Profile {
  bio        String?
  profile_id Int     @id @default(autoincrement())
  user_id    Int
  user       User    @relation(fields: [user_id], references: [user_id])
}

model User {
  email    String    @unique
  name     String?
  user_id  Int       @id @default(autoincrement())
  posts    Post[]
  profiles Profile[]
}",
  "path": "prisma/schema.prisma",
}
`;

exports[`Empty 1`] = `
Object {
  "content": "// An empty Prisma Schema with no models, perfect as a starting point for your own schema.

datasource db {
  provider = \\"mongodb\\"
  url      = env(\\"DATABASE_URL\\")
}

generator client {
  provider = \\"prisma-client-js\\"
  engineType = \\"dataproxy\\"
  previewFeatures = [\\"dataproxy\\", \\"mongoDb\\"]
}",
  "path": "prisma/schema.prisma",
}
`;

exports[`Music Streaming Service 1`] = `
Object {
  "content": "// Schema for a fictional music streaming service
// This service contains songs, albums, artists & playlists, and tracks user interactions with each of them

generator client {
  provider = \\"prisma-client-js\\"
  engineType = \\"dataproxy\\"
  previewFeatures = [\\"dataproxy\\", \\"mongoDb\\"]
}

datasource db {
  provider = \\"mongodb\\"
  url      = env(\\"DATABASE_URL\\")
}

model User {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  email        String        @unique
  interactions Interaction[]
  playlists    Playlist[]
}

model Interaction {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  songId    String?
  userId    String?
  isLiked   Boolean  @default(false)
  playCount Int
  song      Song?    @relation(fields: [songId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model Song {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  albumId      String?
  artistId     String
  length       Float
  track        Int?
  lyrics       String?
  fileUrl      String
  album        Album?        @relation(fields: [albumId], references: [id])
  artist       Artist        @relation(fields: [artistId], references: [id])
  interactions Interaction[]
  playlist     Playlist[]
}

model Artist {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  songs     Song[]
  albums    Album[]
}

model Album {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  cover     String
  songs     Song[]
  artists   Artist[]
}

model Playlist {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  name      String
  user      User?    @relation(fields: [userId], references: [id])
  songs     Song[]
}",
  "path": "prisma/schema.prisma",
}
`;

exports[`Rentals Platform 1`] = `
Object {
  "content": "// Schema for a fictional hotel
// This hotel tracks rooms, user reservations & reviews

generator client {
  provider = \\"prisma-client-js\\"
  engineType = \\"dataproxy\\"
  previewFeatures = [\\"dataproxy\\", \\"mongoDb\\"]
}

datasource db {
  provider = \\"mongodb\\"
  url      = env(\\"DATABASE_URL\\")
}

model User {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  email        String        @unique
  name         String
  reservations Reservation[]
  reviews      Review[]
}

model Reservation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  startDate DateTime
  endDate   DateTime
  price     Int
  total     Int
  roomId    String?
  room      Room?    @relation(fields: [roomId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model Room {
  id                 String        @id @default(uuid())
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  totalOccupancy     Int           @default(5)
  totalBedrooms      Int           @default(5)
  totalBathrooms     Int           @default(5)
  summary            String?
  address            String
  isSmoking          Boolean       @default(false)
  hasTV              Boolean       @default(true)
  hasAirConditioning Boolean       @default(true)
  hasHeating         Boolean       @default(true)
  hasWIFI            Boolean       @default(true)
  price              Int
  media              Media[]
  reservations       Reservation[]
}

model Review {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int
  comment   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Media {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roomId    String?
  fileName  String
  room      Room?    @relation(fields: [roomId], references: [id])
}",
  "path": "prisma/schema.prisma",
}
`;

exports[`SaaS 1`] = `
Object {
  "content": "// Schema for an identity service for a SaaS
// This service tracks existing users & their accounts, as well as invites for users who haven't joined yet

generator client {
  provider = \\"prisma-client-js\\"
  engineType = \\"dataproxy\\"
  previewFeatures = [\\"dataproxy\\", \\"mongoDb\\"]
}

datasource db {
  provider = \\"mongodb\\"
  url      = env(\\"DATABASE_URL\\")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  email     String
  accountId String?
  account   Account? @relation(fields: [accountId], references: [id])
}

model Account {
  id                   String   @id @default(uuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  stripeCustomerId     String
  stripeSubscriptionId String
  referrer             String?
  isActive             Boolean
  invites              Invite[]
  users                User[]
}

model Invite {
  id        String   @id @default(uuid())
  dateSent  DateTime @default(now())
  email     String
  accountId String?
  isValid   Boolean  @default(true)
  account   Account? @relation(fields: [accountId], references: [id])
}",
  "path": "prisma/schema.prisma",
}
`;

exports[`URL Shortener 1`] = `
Object {
  "content": "// Schema for a simple URL shortener
// This schema tracks short links by associating them to a user

generator client {
  provider = \\"prisma-client-js\\"
  engineType = \\"dataproxy\\"
  previewFeatures = [\\"dataproxy\\", \\"mongoDb\\"]
}

datasource db {
  provider = \\"mongodb\\"
  url      = env(\\"DATABASE_URL\\")
}

model Link {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String
  shortUrl  String
  userId    String?
  User      User?    @relation(fields: [userId], references: [id])
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  email     String
  links     Link[]
}",
  "path": "prisma/schema.prisma",
}
`;
