// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`template can have datasourceProivder customized 1`] = `
Saas {
  "artifacts": Object {
    "prisma/seed.js": Object {
      "content": "\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});
exports.seed = seed;

var _studioPcw = require(\\"@prisma/studio-pcw\\");

var faker = _interopRequireWildcard(require(\\"faker\\"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \\"function\\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \\"object\\" && typeof obj !== \\"function\\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \\"default\\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const NUMBER_OF_USERS = 4;
const NUMBER_OF_INVITES = 4;
const data = Array.from({
  length: NUMBER_OF_USERS
}).map(() => ({
  email: faker.internet.email(),
  name: faker.name.firstName(),
  account: {
    stripeCustomerId: faker.datatype.uuid(),
    stripeSubscriptionId: faker.datatype.uuid(),
    isActive: true
  },
  invites: Array.from({
    length: faker.datatype.number({
      min: 0,
      max: NUMBER_OF_INVITES
    })
  }).map(() => ({
    email: faker.internet.email(),
    dateSent: faker.date.future()
  }))
}));
const schema = \`PRISMA TEMPLATE: saas\`;
const schemaPath = \\"/tmp/schema.prisma\\";

async function seed() {
  const pcw = new _studioPcw.PCW(schema, schemaPath, {
    PRISMA_CLOUD_PROJECT_DATASOURCE_URL: process.env.PRISMA_CLOUD_PROJECT_DATASOURCE_URL
  }, {
    forcePrismaLibrary: true,
    resolve: {
      \\".prisma/client\\": require.resolve(\\".prisma/client\\")
    }
  });
  const {
    prisma: prisma
  } = await pcw.getPrismaClient();
  let error;

  try {
    for (let entry of data) {
      await prisma.user.create({
        data: {
          name: entry.name,
          email: entry.email,
          account: {
            create: {
              stripeCustomerId: entry.account.stripeCustomerId,
              stripeSubscriptionId: entry.account.stripeSubscriptionId,
              isActive: true,
              invites: {
                create: entry.invites
              }
            }
          }
        }
      });
    }
  } catch (e) {
    await prisma.$disconnect();
    throw e;
  } finally {
    await prisma.$disconnect();
  }
}

(async () => await seed())()",
      "path": "prisma/seed.js",
    },
  },
  "files": Object {
    "README.md": Object {
      "content": "# SaaS

Generic Prisma schema example for a SaaS that has a referral system.

![Database diagram](https://raw.githubusercontent.com/prisma/prisma-schema-examples/main/saas/diagram.png)

(Generated via https://github.com/notiz-dev/prisma-dbml-generator + https://dbdiagram.io)

### Setting this project up locally

Once you clone your repo, you'll want to set up this repo for local development. In order to start using Prisma locally, you need to make Prisma aware of your database. The most portable way to do this is to use environment variables via a \`.env\` file.

1. You'll see that your Prisma Schema file (at \`prisma/schema.prisma\`) is already configured to use an environment variable called \`DATABASE_URL\`. [Read more about environment variables in Prisma](https://www.prisma.io/docs/concepts/more/environment-variables)
2. You'll need a database to connect to. You may use the same one you used while setting this project up on the Prisma Data Platform, but we recommend setting up a local database and use that during development. If you're new to databases, we recommend [reading up](https://www.prisma.io/dataguide/) on them. This guide also has instructions on how to set up a local database.
3. Once you have a locally accessible database connection string, create a new file called \`.env\` in the \`prisma\` directory, and populate it with: \`DATABASE_URL=\\"<replace-me-with-your-connection-string>\\"\`. Prisma will automatically pick up the environment variable used in the schema and use its value to connect to your database.
4. Now you can run \`npm run init\` to set up your local database. This will create tables corresponding to models in your Prisma Schema and populate them with fake data for you to play around with.
   - [Read more about the Prisma Schema](https://www.prisma.io/docs/concepts/components/prisma-schema)
   - [Read more about database seeding](https://www.prisma.io/docs/guides/database/seed-database)

To learn more about Prisma, we recommend reading through our [Getting Started guide](https://www.prisma.io/docs/getting-started)",
      "path": "README.md",
    },
    "package.json": Object {
      "content": "{
  \\"name\\": \\"saas\\",
  \\"license\\": \\"UNLICENSED\\",
  \\"devDependencies\\": {
    \\"@types/faker\\": \\"5.5.6\\",
    \\"@types/node\\": \\"15.12.5\\",
    \\"faker\\": \\"5.5.3\\",
    \\"prisma\\": \\"2.25.0\\",
    \\"ts-node\\": \\"10.0.0\\",
    \\"typescript\\": \\"4.3.3\\"
  },
  \\"scripts\\": {
    \\"init\\": \\"prisma db push && prisma db seed --preview-feature\\",
    \\"dev\\": \\"ts-node ./script.ts\\"
  },
  \\"dependencies\\": {
    \\"@prisma/client\\": \\"2.25.0\\"
  },
  \\"engines\\": {
    \\"node\\": \\">=12.2.0\\"
  }
}",
      "path": "package.json",
    },
    "prisma/schema.prisma": Object {
      "content": "// Schema for an identity service for a SaaS
// This service tracks existing users & their accounts, as well as invites for users who haven't joined yet

datasource db {
  provider = \\"mysql\\"
  url      = env(\\"DATABASE_URL\\")
}

generator client {
  provider = \\"prisma-client-js\\"
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  email     String
  account   Account? @relation(fields: [accountId], references: [id])
  accountId String?
}

model Account {
  id                   String   @id @default(uuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  invites              Invite[]
  users                User[]
  stripeCustomerId     String
  stripeSubscriptionId String
  referrer             String?
  isActive             Boolean

}

model Invite {
  id        String   @id @default(uuid())
  dateSent  DateTime @default(now())
  email     String
  account   Account? @relation(fields: [accountId], references: [id])
  accountId String?
  isValid   Boolean  @default(true)
}",
      "path": "prisma/schema.prisma",
    },
    "prisma/seed.ts": Object {
      "content": "import { PrismaClient } from '@prisma/client'
import * as faker from 'faker'

const NUMBER_OF_USERS = 4
const NUMBER_OF_INVITES = 4

const data = Array.from({ length: NUMBER_OF_USERS }).map(() => ({
  email: faker.internet.email(),
  name: faker.name.firstName(),
  account: {
    stripeCustomerId: faker.datatype.uuid(),
    stripeSubscriptionId: faker.datatype.uuid(),
    isActive: true,
  },
  invites: Array.from({
    length: faker.datatype.number({ min: 0, max: NUMBER_OF_INVITES }),
  }).map(() => ({
    email: faker.internet.email(),
    dateSent: faker.date.future(),
  })),
}))

export async function seed() {
  const prisma = new PrismaClient()

  let error
  try {
    for (let entry of data) {
      await prisma.user.create({
        data: {
          name: entry.name,
          email: entry.email,
          account: {
            create: {
              stripeCustomerId: entry.account.stripeCustomerId,
              stripeSubscriptionId: entry.account.stripeSubscriptionId,
              isActive: true,
              invites: {
                create: entry.invites,
              },
            },
          },
        },
      })
    }
  } catch (e) {
    await prisma.$disconnect()
    throw e
  } finally {
    await prisma.$disconnect()
  }
}",
      "path": "prisma/seed.ts",
    },
    "script.ts": Object {
      "content": "import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

const main = async () => {
  const accounts = await prisma.account.findMany({
    where: {
      plan: 'PREMIUM',
    },
  })

  console.log('Premium accounts: ', accounts)
}

main()
  .catch((e) => console.error('Error in Prisma Client query: ', e))
  .finally(async () => await prisma.$disconnect())",
      "path": "script.ts",
    },
    "tsconfig.json": Object {
      "content": "{
  \\"compilerOptions\\": {
    \\"sourceMap\\": true,
    \\"outDir\\": \\"dist\\",
    \\"strict\\": true,
    \\"lib\\": [\\"esnext\\", \\"dom\\"],
    \\"esModuleInterop\\": true
  }
}",
      "path": "tsconfig.json",
    },
  },
  "metadata": Object {
    "displayName": "Saas",
    "githubUrl": "https://github.com/prisma/prisma-schema-examples/tree/main/saas",
    "name": "saas",
  },
}
`;
