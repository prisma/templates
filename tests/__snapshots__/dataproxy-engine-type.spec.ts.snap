// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`empty 1`] = `
Object {
  "content": "// An empty Prisma Schema with no models, perfect as a starting point for your own schema.

datasource db {
  provider = \\"mysql\\"
  url      = env(\\"DATABASE_URL\\")
}

generator client {
  provider = \\"prisma-client-js\\"
  previewFeatures = [\\"dataproxy\\"]
}",
  "path": "prisma/schema.prisma",
}
`;

exports[`empty 2`] = `
Object {
  "content": "# Empty Prisma Project
[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/import?repository-url=https%3A%2F%2Fgithub.com%2Fprisma%2Ftemplates-node&env=DATABASE_URL,DATABASE_MIGRATE_URL,PRISMA_CLIENT_ENGINE_TYPE&envDescription=Database%20connection%20strings%20your%20app%20depends%20on.%20You%20should%20switch%20back%20to%20the%20Prisma%20Data%20Platform%20to%20figure%20out%20what%20values%20to%20input%20here.)<br />

An empty Prisma Schema with no models, perfect as a starting point for your own schema.",
  "path": "README.md",
}
`;

exports[`music-streaming-service 1`] = `
Object {
  "content": "// Schema for a fictional music streaming service
// This service contains songs, albums, artists & playlists, and tracks user interactions with each of them

generator client {
  provider = \\"prisma-client-js\\"
  previewFeatures = [\\"dataproxy\\"]
}

datasource db {
  provider = \\"mysql\\"
  url      = env(\\"DATABASE_URL\\")
}

model User {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  email        String        @unique
  interactions Interaction[]
  playlists    Playlist[]
}

model Interaction {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  songId    String?
  userId    String?
  isLiked   Boolean  @default(false)
  playCount Int
  song      Song?    @relation(fields: [songId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model Song {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  albumId      String?
  artistId     String
  length       Float
  track        Int?
  lyrics       String?
  fileUrl      String
  album        Album?        @relation(fields: [albumId], references: [id])
  artist       Artist        @relation(fields: [artistId], references: [id])
  interactions Interaction[]
  playlist     Playlist[]
}

model Artist {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  songs     Song[]
  albums    Album[]
}

model Album {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  cover     String
  songs     Song[]
  artists   Artist[]
}

model Playlist {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  name      String
  user      User?    @relation(fields: [userId], references: [id])
  songs     Song[]
}",
  "path": "prisma/schema.prisma",
}
`;

exports[`music-streaming-service 2`] = `
Object {
  "content": "# Music Streaming Service
[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/import?repository-url=https%3A%2F%2Fgithub.com%2Fprisma%2Ftemplates-node&env=DATABASE_URL,DATABASE_MIGRATE_URL,PRISMA_CLIENT_ENGINE_TYPE&envDescription=Database%20connection%20strings%20your%20app%20depends%20on.%20You%20should%20switch%20back%20to%20the%20Prisma%20Data%20Platform%20to%20figure%20out%20what%20values%20to%20input%20here.)<br />

![Database diagram](https://raw.githubusercontent.com/prisma/prisma-schema-examples/main/musicStreamingService/diagram.png)

(Generated via https://github.com/notiz-dev/prisma-dbml-generator + https://dbdiagram.io)

### Setting this project up locally

Once you clone your repo, you'll want to set up this repo for local development. In order to start using Prisma locally, you need to make Prisma aware of your database. The most portable way to do this is to use environment variables via a \`.env\` file.

1. You'll see that your Prisma Schema file (at \`prisma/schema.prisma\`) is already configured to use an environment variable called \`DATABASE_URL\`. [Read more about environment variables in Prisma](https://www.prisma.io/docs/concepts/more/environment-variables)
2. You'll need a database to connect to. You may use the same one you used while setting this project up on the Prisma Data Platform, but we recommend setting up a local database and use that during development. If you're new to databases, we recommend [reading up](https://www.prisma.io/dataguide/) on them. This guide also has instructions on how to set up a local database.
3. Once you have a locally accessible database connection string, create a new file called \`.env\` in the \`prisma\` directory, and populate it with: \`DATABASE_URL=\\"<replace-me-with-your-connection-string>\\"\`. Prisma will automatically pick up the environment variable used in the schema and use its value to connect to your database.
4. Now you can run \`npm run init\` to set up your local database. This will create tables corresponding to models in your Prisma Schema and populate them with fake data for you to play around with.
   - [Read more about the Prisma Schema](https://www.prisma.io/docs/concepts/components/prisma-schema)
   - [Read more about database seeding](https://www.prisma.io/docs/guides/database/seed-database)

To learn more about Prisma, we recommend reading through our [Getting Started guide](https://www.prisma.io/docs/getting-started)",
  "path": "README.md",
}
`;

exports[`nextjs 1`] = `
Object {
  "content": "generator client {
  provider = \\"prisma-client-js\\"
  previewFeatures = [\\"dataproxy\\"]
}

datasource db {
  provider = \\"mysql\\"
  url      = env(\\"DATABASE_URL\\")
}

model Post {
  post_id   Int     @id @default(autoincrement())
  content   String?
  title     String
  author_id Int?
  author    User?   @relation(fields: [author_id], references: [user_id])
}

model Profile {
  bio        String?
  profile_id Int     @id @default(autoincrement())
  user_id    Int
  user       User    @relation(fields: [user_id], references: [user_id])
}

model User {
  email    String    @unique
  name     String?
  user_id  Int       @id @default(autoincrement())
  posts    Post[]
  profiles Profile[]
}",
  "path": "prisma/schema.prisma",
}
`;

exports[`nextjs 2`] = `
Object {
  "content": "# Next.js Blog
[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/import?repository-url=https%3A%2F%2Fgithub.com%2Fprisma%2Ftemplates-node&env=DATABASE_URL,DATABASE_MIGRATE_URL,PRISMA_CLIENT_ENGINE_TYPE&envDescription=Database%20connection%20strings%20your%20app%20depends%20on.%20You%20should%20switch%20back%20to%20the%20Prisma%20Data%20Platform%20to%20figure%20out%20what%20values%20to%20input%20here.)<br />

A simple blog example, built with Next.js & Prisma

### Setting this project up locally

Once you clone your repo, you'll want to set up this repo for local development. In order to start using Prisma locally, you need to make Prisma aware of your database. The most portable way to do this is to use environment variables via a \`.env\` file.

1. You'll see that your Prisma Schema file (at \`prisma/schema.prisma\`) is already configured to use an environment variable called \`DATABASE_URL\`. [Read more about environment variables in Prisma](https://www.prisma.io/docs/concepts/more/environment-variables)
2. You'll need a database to connect to. You may use the same one you used while setting this project up on the Prisma Data Platform, but we recommend setting up a local database and use that during development. If you're new to databases, we recommend [reading up](https://www.prisma.io/dataguide/) on them. This guide also has instructions on how to set up a local database.
3. Once you have a locally accessible database connection string, create a new file called \`.env\` in the \`prisma\` directory, and populate it with: \`DATABASE_URL=\\"<replace-me-with-your-connection-string>\\"\`. Prisma will automatically pick up the environment variable used in the schema and use its value to connect to your database.
4. Now you can run \`npm run dev\` to view the blog app

To learn more about Prisma, we recommend reading through our [Getting Started guide](https://www.prisma.io/docs/getting-started)",
  "path": "README.md",
}
`;

exports[`rentals-platform 1`] = `
Object {
  "content": "// Schema for a fictional hotel
// This hotel tracks rooms, user reservations & reviews

generator client {
  provider = \\"prisma-client-js\\"
  previewFeatures = [\\"dataproxy\\"]
}

datasource db {
  provider = \\"mysql\\"
  url      = env(\\"DATABASE_URL\\")
}

model User {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  email        String        @unique
  name         String
  reservations Reservation[]
  reviews      Review[]
}

model Reservation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  startDate DateTime
  endDate   DateTime
  price     Int
  total     Int
  roomId    String?
  room      Room?    @relation(fields: [roomId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model Room {
  id                 String        @id @default(uuid())
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  totalOccupancy     Int           @default(5)
  totalBedrooms      Int           @default(5)
  totalBathrooms     Int           @default(5)
  summary            String?
  address            String
  isSmoking          Boolean       @default(false)
  hasTV              Boolean       @default(true)
  hasAirConditioning Boolean       @default(true)
  hasHeating         Boolean       @default(true)
  hasWIFI            Boolean       @default(true)
  price              Int
  media              Media[]
  reservations       Reservation[]
}

model Review {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int
  comment   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Media {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roomId    String?
  fileName  String
  room      Room?    @relation(fields: [roomId], references: [id])
}",
  "path": "prisma/schema.prisma",
}
`;

exports[`rentals-platform 2`] = `
Object {
  "content": "# Rentals Platform
[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/import?repository-url=https%3A%2F%2Fgithub.com%2Fprisma%2Ftemplates-node&env=DATABASE_URL,DATABASE_MIGRATE_URL,PRISMA_CLIENT_ENGINE_TYPE&envDescription=Database%20connection%20strings%20your%20app%20depends%20on.%20You%20should%20switch%20back%20to%20the%20Prisma%20Data%20Platform%20to%20figure%20out%20what%20values%20to%20input%20here.)<br />

![Database Diagram](https://github.com/prisma/prisma-schema-examples/blob/main/rentalsPlatform/diagram.png?raw=true)

(Generated via https://github.com/notiz-dev/prisma-dbml-generator + https://dbdiagram.io)

### Setting this project up locally

Once you clone your repo, you'll want to set up this repo for local development. In order to start using Prisma locally, you need to make Prisma aware of your database. The most portable way to do this is to use environment variables via a \`.env\` file.

1. You'll see that your Prisma Schema file (at \`prisma/schema.prisma\`) is already configured to use an environment variable called \`DATABASE_URL\`. [Read more about environment variables in Prisma](https://www.prisma.io/docs/concepts/more/environment-variables)
2. You'll need a database to connect to. You may use the same one you used while setting this project up on the Prisma Data Platform, but we recommend setting up a local database and use that during development. If you're new to databases, we recommend [reading up](https://www.prisma.io/dataguide/) on them. This guide also has instructions on how to set up a local database.
3. Once you have a locally accessible database connection string, create a new file called \`.env\` in the \`prisma\` directory, and populate it with: \`DATABASE_URL=\\"<replace-me-with-your-connection-string>\\"\`. Prisma will automatically pick up the environment variable used in the schema and use its value to connect to your database.
4. Now you can run \`npm run init\` to set up your local database. This will create tables corresponding to models in your Prisma Schema and populate them with fake data for you to play around with.
   - [Read more about the Prisma Schema](https://www.prisma.io/docs/concepts/components/prisma-schema)
   - [Read more about database seeding](https://www.prisma.io/docs/guides/database/seed-database)

To learn more about Prisma, we recommend reading through our [Getting Started guide](https://www.prisma.io/docs/getting-started)",
  "path": "README.md",
}
`;

exports[`saas 1`] = `
Object {
  "content": "// Schema for an identity service for a SaaS
// This service tracks existing users & their accounts, as well as invites for users who haven't joined yet

generator client {
  provider = \\"prisma-client-js\\"
  previewFeatures = [\\"dataproxy\\"]
}

datasource db {
  provider = \\"mysql\\"
  url      = env(\\"DATABASE_URL\\")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  email     String
  accountId String?
  account   Account? @relation(fields: [accountId], references: [id])
}

model Account {
  id                   String   @id @default(uuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  stripeCustomerId     String
  stripeSubscriptionId String
  referrer             String?
  isActive             Boolean
  invites              Invite[]
  users                User[]
}

model Invite {
  id        String   @id @default(uuid())
  dateSent  DateTime @default(now())
  email     String
  accountId String?
  isValid   Boolean  @default(true)
  account   Account? @relation(fields: [accountId], references: [id])
}",
  "path": "prisma/schema.prisma",
}
`;

exports[`saas 2`] = `
Object {
  "content": "# SaaS
[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/import?repository-url=https%3A%2F%2Fgithub.com%2Fprisma%2Ftemplates-node&env=DATABASE_URL,DATABASE_MIGRATE_URL,PRISMA_CLIENT_ENGINE_TYPE&envDescription=Database%20connection%20strings%20your%20app%20depends%20on.%20You%20should%20switch%20back%20to%20the%20Prisma%20Data%20Platform%20to%20figure%20out%20what%20values%20to%20input%20here.)<br />

Generic Prisma schema example for a SaaS that has a referral system.

![Database diagram](https://raw.githubusercontent.com/prisma/prisma-schema-examples/main/saas/diagram.png)

(Generated via https://github.com/notiz-dev/prisma-dbml-generator + https://dbdiagram.io)

### Setting this project up locally

Once you clone your repo, you'll want to set up this repo for local development. In order to start using Prisma locally, you need to make Prisma aware of your database. The most portable way to do this is to use environment variables via a \`.env\` file.

1. You'll see that your Prisma Schema file (at \`prisma/schema.prisma\`) is already configured to use an environment variable called \`DATABASE_URL\`. [Read more about environment variables in Prisma](https://www.prisma.io/docs/concepts/more/environment-variables)
2. You'll need a database to connect to. You may use the same one you used while setting this project up on the Prisma Data Platform, but we recommend setting up a local database and use that during development. If you're new to databases, we recommend [reading up](https://www.prisma.io/dataguide/) on them. This guide also has instructions on how to set up a local database.
3. Once you have a locally accessible database connection string, create a new file called \`.env\` in the \`prisma\` directory, and populate it with: \`DATABASE_URL=\\"<replace-me-with-your-connection-string>\\"\`. Prisma will automatically pick up the environment variable used in the schema and use its value to connect to your database.
4. Now you can run \`npm run init\` to set up your local database. This will create tables corresponding to models in your Prisma Schema and populate them with fake data for you to play around with.
   - [Read more about the Prisma Schema](https://www.prisma.io/docs/concepts/components/prisma-schema)
   - [Read more about database seeding](https://www.prisma.io/docs/guides/database/seed-database)

To learn more about Prisma, we recommend reading through our [Getting Started guide](https://www.prisma.io/docs/getting-started)",
  "path": "README.md",
}
`;

exports[`url-shortener 1`] = `
Object {
  "content": "// Schema for a simple URL shortener
// This schema tracks short links by associating them to a user

generator client {
  provider = \\"prisma-client-js\\"
  previewFeatures = [\\"dataproxy\\"]
}

datasource db {
  provider = \\"mysql\\"
  url      = env(\\"DATABASE_URL\\")
}

model Link {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String
  shortUrl  String
  userId    String?
  User      User?    @relation(fields: [userId], references: [id])
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  email     String
  links     Link[]
}",
  "path": "prisma/schema.prisma",
}
`;

exports[`url-shortener 2`] = `
Object {
  "content": "# URL Shortener
[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/import?repository-url=https%3A%2F%2Fgithub.com%2Fprisma%2Ftemplates-node&env=DATABASE_URL,DATABASE_MIGRATE_URL,PRISMA_CLIENT_ENGINE_TYPE&envDescription=Database%20connection%20strings%20your%20app%20depends%20on.%20You%20should%20switch%20back%20to%20the%20Prisma%20Data%20Platform%20to%20figure%20out%20what%20values%20to%20input%20here.)<br />

![Database diagram](https://raw.githubusercontent.com/prisma/prisma-schema-examples/main/urlShortener/diagram.png)

(Generated via https://github.com/notiz-dev/prisma-dbml-generator + https://dbdiagram.io)

### Setting this project up locally

Once you clone your repo, you'll want to set up this repo for local development. In order to start using Prisma locally, you need to make Prisma aware of your database. The most portable way to do this is to use environment variables via a \`.env\` file.

1. You'll see that your Prisma Schema file (at \`prisma/schema.prisma\`) is already configured to use an environment variable called \`DATABASE_URL\`. [Read more about environment variables in Prisma](https://www.prisma.io/docs/concepts/more/environment-variables)
2. You'll need a database to connect to. You may use the same one you used while setting this project up on the Prisma Data Platform, but we recommend setting up a local database and use that during development. If you're new to databases, we recommend [reading up](https://www.prisma.io/dataguide/) on them. This guide also has instructions on how to set up a local database.
3. Once you have a locally accessible database connection string, create a new file called \`.env\` in the \`prisma\` directory, and populate it with: \`DATABASE_URL=\\"<replace-me-with-your-connection-string>\\"\`. Prisma will automatically pick up the environment variable used in the schema and use its value to connect to your database.
4. Now you can run \`npm run init\` to set up your local database. This will create tables corresponding to models in your Prisma Schema and populate them with fake data for you to play around with.
   - [Read more about the Prisma Schema](https://www.prisma.io/docs/concepts/components/prisma-schema)
   - [Read more about database seeding](https://www.prisma.io/docs/guides/database/seed-database)

To learn more about Prisma, we recommend reading through our [Getting Started guide](https://www.prisma.io/docs/getting-started)",
  "path": "README.md",
}
`;
