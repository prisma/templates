// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`files Blog 1`] = `
Object {
  ".eslintrc.json": Object {
    "content": "{
  \\"extends\\": \\"next/core-web-vitals\\"
}",
    "path": ".eslintrc.json",
  },
  ".gitignore": Object {
    "content": "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env.local
.env.development.local
.env.test.local
.env.production.local

# vercel
.vercel",
    "path": ".gitignore",
  },
  "README.md": Object {
    "content": "# Next.js Blog

A simple blog example, built with Next.js & Prisma

### Setting this project up locally

Once you clone your repo, you'll want to set up this repo for local development. In order to start using Prisma locally, you need to make Prisma aware of your database. The most portable way to do this is to use environment variables via a \`.env\` file.

1. You'll see that your Prisma Schema file (at \`prisma/schema.prisma\`) is already configured to use an environment variable called \`DATABASE_URL\`. [Read more about environment variables in Prisma](https://www.prisma.io/docs/concepts/more/environment-variables)
2. You'll need a database to connect to. You may use the same one you used while setting this project up on the Prisma Data Platform, but we recommend setting up a local database and use that during development. If you're new to databases, we recommend [reading up](https://www.prisma.io/dataguide/) on them. This guide also has instructions on how to set up a local database.
3. Once you have a locally accessible database connection string, create a new file called \`.env\` in the \`prisma\` directory, and populate it with: \`DATABASE_URL=\\"<replace-me-with-your-connection-string>\\"\`. Prisma will automatically pick up the environment variable used in the schema and use its value to connect to your database.
4. Now you can run \`npm run dev\` to view the blog app

To learn more about Prisma, we recommend reading through our [Getting Started guide](https://www.prisma.io/docs/getting-started)",
    "path": "README.md",
  },
  "lib/prisma.ts": Object {
    "content": "/**
 * Avoid instantiating too many instances of Prisma, especially in development.
 *
 * @link https://www.prisma.io/docs/support/help-articles/nextjs-prisma-client-dev-practices#problem
 */

import { PrismaClient } from '@prisma/client'

let prisma: PrismaClient

if (process.env.NODE_ENV === 'production') {
  prisma = new PrismaClient()
} else {
  const g = global as any
  if (!g.prisma) g.prisma = new PrismaClient()
  prisma = g.prisma
}

export { prisma }",
    "path": "lib/prisma.ts",
  },
  "next-env.d.ts": Object {
    "content": "/// <reference types=\\"next\\" />
/// <reference types=\\"next/types/global\\" />
/// <reference types=\\"next/image-types/global\\" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.",
    "path": "next-env.d.ts",
  },
  "next.config.js": Object {
    "content": "/** @type {import('next').NextConfig} */
module.exports = {
  reactStrictMode: true,
}",
    "path": "next.config.js",
  },
  "package.json": Object {
    "content": "{
  \\"name\\": \\"nextjs\\",
  \\"description\\": \\"Schema for a blog built with Next.js\\",
  \\"license\\": \\"UNLICENSED\\",
  \\"dependencies\\": {
    \\"@prisma/client\\": \\"3.15.2\\",
    \\"next\\": \\"11.1.3\\",
    \\"react\\": \\"17.0.2\\",
    \\"react-dom\\": \\"17.0.2\\"
  },
  \\"devDependencies\\": {
    \\"@types/faker\\": \\"5.5.9\\",
    \\"@types/node\\": \\"17.0.21\\",
    \\"@types/react\\": \\"17.0.39\\",
    \\"eslint\\": \\"7.32.0\\",
    \\"eslint-config-next\\": \\"11.1.4\\",
    \\"faker\\": \\"5.5.3\\",
    \\"prisma\\": \\"3.15.2\\",
    \\"ts-node\\": \\"10.5.0\\",
    \\"typescript\\": \\"4.5.5\\"
  },
  \\"prisma\\": {
    \\"seed\\": \\"ts-node ./prisma/seed.ts\\"
  },
  \\"scripts\\": {
    \\"init\\": \\"prisma db push && prisma db seed\\",
    \\"dev\\": \\"next dev\\",
    \\"build\\": \\"next build\\",
    \\"start\\": \\"next start\\",
    \\"lint\\": \\"next lint\\",
    \\"prisma:generate\\": \\"prisma generate\\"
  }
}",
    "path": "package.json",
  },
  "pages/_app.tsx": Object {
    "content": "import '../styles/globals.css'
import type { AppProps } from 'next/app'

function MyApp({ Component, pageProps }: AppProps) {
  return <Component {...pageProps} />
}
export default MyApp",
    "path": "pages/_app.tsx",
  },
  "pages/api/index.ts": Object {
    "content": "import { NextApiHandler } from 'next'

const handler: NextApiHandler = (req, res) => {
  res.status(200).json({ up: true })
}

export default handler",
    "path": "pages/api/index.ts",
  },
  "pages/api/posts.ts": Object {
    "content": "import { NextApiHandler } from 'next'
import { prisma } from '../../lib/prisma'

const handler: NextApiHandler = async (req, res) => {
  if (req.method === 'GET') {
    try {
      const users = await prisma.post.findMany({
        include: { author: true },
      })
      res.status(200).json(users)
    } catch (error) {
      console.error(error)
      res.status(500).json(error)
    }
  } else if (req.method === 'POST') {
    const { title, content, authorEmail } = req.body
    try {
      const createdPost = await prisma.post.create({
        data: {
          title,
          content,
          author: {
            connect: {
              email: authorEmail,
            },
          },
        },
      })

      res.status(200).json(createdPost)
      return
    } catch (e) {
      console.error(e)

      res.status(500)
      return
    }
  } else {
    res.status(404)
  }
}

export default handler",
    "path": "pages/api/posts.ts",
  },
  "pages/api/seed.ts": Object {
    "content": "import { Prisma } from '@prisma/client'
import { NextApiHandler } from 'next'
import { prisma } from '../../lib/prisma'

const handler: NextApiHandler = async (req, res) => {
  try {
    await prisma.$transaction([
      prisma.profile.deleteMany({}),
      prisma.post.deleteMany({}),
      prisma.user.deleteMany({}),
    ])

    const createdUsers = await prisma.$transaction([
      prisma.user.create({
        data: seedUsers[0],
      }),
      prisma.user.create({
        data: seedUsers[1],
      }),
    ])

    res.status(201).json(createdUsers)
  } catch (error) {
    console.error(error)
    res.status(500).end()
  }
}

const seedUsers: Prisma.UserCreateInput[] = [
  {
    email: 'jane@prisma.io',
    name: 'Jane',
    profiles: {
      create: [
        {
          bio: 'Technical Writer',
        },
        {
          bio: 'Health Enthusiast',
        },
        {
          bio: 'Self Quantifier',
        },
      ],
    },
    posts: {
      create: [
        {
          title:
            'Comparing Database Types: How Database Types Evolved to Meet Different Needs',
          content:
            'https://www.prisma.io/blog/comparison-of-database-models-1iz9u29nwn37/',
        },
        {
          title: 'Analysing Sleep Patterns: The Quantified Self',
          content: 'https://quantifiedself.com/get-started/',
        },
      ],
    },
  },
  {
    email: 'toru@prisma.io',
    name: 'Toru Takemitsu',
    profiles: {
      create: [
        {
          bio: 'Composer',
        },
        {
          bio: 'Musician',
        },
        {
          bio: 'Writer',
        },
      ],
    },
    posts: {
      create: [
        {
          title: 'Requiem for String Orchestra',
          content: '',
        },
        {
          title: 'Music of Tree',
          content: '',
        },
        {
          title: 'Waves for clarinet, horn, two trombones and bass drum ',
          content: '',
        },
      ],
    },
  },
]

export default handler",
    "path": "pages/api/seed.ts",
  },
  "pages/api/users.ts": Object {
    "content": "import { Prisma } from '@prisma/client'
import { NextApiHandler } from 'next'
import { prisma } from '../../lib/prisma'

const handler: NextApiHandler = async (req, res) => {
  if (req.method === 'GET') {
    try {
      const users = await prisma.user.findMany({
        include: { profiles: true },
      })

      res.status(200).json(users)
    } catch (error) {
      console.error(error)

      res.status(500).json(error)
      return
    }
  } else if (req.method === 'POST') {
    try {
      const createdUser = await prisma.user.create({
        data: req.body,
      })

      res.status(200).json(createdUser)
    } catch (e) {
      if (e instanceof Prisma.PrismaClientKnownRequestError) {
        if (e.code === 'P2002') {
          res
            .status(409)
            .json({ error: 'A user with this email already exists' })
          return
        }
      }

      console.error(e)
      res.status(500)
      return
    }
  } else {
    res.status(404)
    return
  }
}

export default handler",
    "path": "pages/api/users.ts",
  },
  "pages/index.tsx": Object {
    "content": "import type { NextPage } from 'next'
import Head from 'next/head'
import { useState } from 'react'
import styles from '../styles/Home.module.css'
import Image from 'next/image'

async function fetchApi(endpoint: string) {
  const response = await fetch(\`/api/\${endpoint}\`)
  if (!response.ok) {
    throw new Error('Network response was not ok')
  }

  return response.json()
}

const Home: NextPage = () => {
  const [isLoadingPost, setLoadingPost] = useState(false)
  const [apiResponse, setApiResponse] = useState(null)
  const [apiError, setApiError] = useState(null)

  const getApiCallback = (endpoint: string) => async () => {
    setLoadingPost(true)
    setApiError(null)

    try {
      const response = await fetchApi(endpoint)
      setApiResponse(response)
    } catch (e: any) {
      console.error(e)
      setApiError(e)
    }

    setLoadingPost(false)
  }

  const onGetStatus = getApiCallback('')
  const onSeed = getApiCallback('seed')
  const onGetUsers = getApiCallback('users')
  const onGetPosts = getApiCallback('posts')

  return (
    <div className={styles.container}>
      <Head>
        <title>Prisma example with Vercel</title>
        <link rel=\\"icon\\" href=\\"/favicon.png\\" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Prisma Vercel Deployment Example</h1>

        <div className={styles.grid}>
          <button onClick={onGetStatus} className={styles.apiButton}>
            Check API status
          </button>
          <button onClick={onSeed} className={styles.apiButton}>
            Seed data
          </button>
          <button onClick={onGetUsers} className={styles.apiButton}>
            Load users with profiles
          </button>
          <button onClick={onGetPosts} className={styles.apiButton}>
            Load posts
          </button>
          <div
            className={\`\${styles.loader} \${isLoadingPost ? '' : styles.hidden}\`}
          ></div>
        </div>
        <pre
          className={\`responseContainer \${styles.code} \${
            apiResponse ? '' : styles.hidden
          }\`}
        >
          {apiResponse && JSON.stringify(apiResponse, null, 2)}
        </pre>
      </main>

      <footer className={styles.footer}>
        Powered by
        <img
          src=\\"/vercel.svg\\"
          alt=\\"Vercel Logo\\"
          className={styles.logo}
          width={71}
          height={16}
        />
        &
        <Image
          src=\\"/prisma.svg\\"
          alt=\\"Prisma Logo\\"
          className={styles.logo}
          width={32}
          height={16}
        />
      </footer>
    </div>
  )
}

export default Home",
    "path": "pages/index.tsx",
  },
  "prisma/schema.prisma": Object {
    "content": "generator client {
  provider = \\"prisma-client-js\\"
}

datasource db {
  provider = \\"postgresql\\"
  url      = env(\\"DATABASE_URL\\")
}

model Post {
  post_id   Int     @id @default(autoincrement())
  content   String?
  title     String
  author_id Int?
  author    User?   @relation(fields: [author_id], references: [user_id])
}

model Profile {
  bio        String?
  profile_id Int     @id @default(autoincrement())
  user_id    Int
  user       User    @relation(fields: [user_id], references: [user_id])
}

model User {
  email    String    @unique
  name     String?
  user_id  Int       @id @default(autoincrement())
  posts    Post[]
  profiles Profile[]
}",
    "path": "prisma/schema.prisma",
  },
  "prisma/seed.ts": Object {
    "content": "import { Prisma, PrismaClient } from '@prisma/client'
import faker from 'faker'

const prisma = new PrismaClient()

const NUMBER_OF_USERS = 10
const MAX_POSTS = 10
const MAX_PROFILES = 2

const users: Prisma.UserCreateInput[] = Array.from({
  length: NUMBER_OF_USERS,
}).map((_, i) => ({
  email: faker.internet.email(),
  name: faker.name.firstName(),
  posts: {
    createMany: {
      data: Array.from({
        length: faker.datatype.number({ min: 0, max: MAX_POSTS }),
      }).map(() => ({
        content: faker.lorem.paragraphs(),
        title: faker.lorem.words(),
      })),
    },
  },
  profiles: {
    createMany: {
      data: Array.from({
        length: faker.datatype.number({ min: 1, max: MAX_PROFILES }),
      }).map(() => ({
        bio: faker.lorem.paragraph(),
      })),
    },
  },
}))

async function main() {
  await prisma.$transaction(
    users.map((user) =>
      prisma.user.create({
        data: user,
      }),
    ),
  )
}

main().finally(async () => {
  await prisma.$disconnect()
})",
    "path": "prisma/seed.ts",
  },
  "public/prisma.svg": Object {
    "content": "<svg width=\\"13\\" height=\\"16\\" viewBox=\\"0 0 106 128\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">
  <path fill-rule=\\"evenodd\\" clip-rule=\\"evenodd\\"
    d=\\"M105.306 97.5187L61.2843 4.03669V4.03469C60.1803 1.69769 57.8763 0.155691 55.2653 0.0126908C52.5863 -0.143309 50.1863 1.14869 48.8323 3.34769L1.08827 80.6777C-0.390728 83.0877 -0.361728 86.0597 1.17227 88.4407L24.5103 124.593C25.9013 126.751 28.3113 128 30.8163 128C31.5263 128 32.2403 127.9 32.9423 127.692L100.686 107.656C102.761 107.042 104.458 105.574 105.346 103.628C106.231 101.681 106.217 99.4527 105.306 97.5187ZM95.4493 101.529L37.9703 118.529C36.2143 119.049 34.5313 117.53 34.9003 115.759L55.4343 17.4197C55.8183 15.5807 58.3603 15.2887 59.1623 16.9917L97.1823 97.7277C97.8993 99.2507 97.0813 101.047 95.4493 101.529Z\\"
    fill=\\"black\\" />
</svg>",
    "path": "public/prisma.svg",
  },
  "public/vercel.svg": Object {
    "content": "<svg width=\\"283\\" height=\\"64\\" viewBox=\\"0 0 283 64\\" fill=\\"none\\" 
    xmlns=\\"http://www.w3.org/2000/svg\\">
    <path d=\\"M141.04 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM248.72 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM200.24 34c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.07 0-10 4-10 10zm82.48-29v46h-9V5h9zM36.95 0L73.9 64H0L36.95 0zm92.38 5l-27.71 48L73.91 5H84.3l17.32 30 17.32-30h10.39zm58.91 12v9.69c-1-.29-2.06-.49-3.2-.49-5.81 0-10 4-10 10V51h-9V17h9v9.2c0-5.08 5.91-9.2 13.2-9.2z\\" fill=\\"#000\\"/>
</svg>",
    "path": "public/vercel.svg",
  },
  "styles/Home.module.css": Object {
    "content": ".container {
  min-height: 100vh;
  padding: 0 0.5rem;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.main {
  padding: 5rem 0;
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.footer {
  width: 100%;
  height: 100px;
  border-top: 1px solid #eaeaea;
  display: flex;
  justify-content: center;
  align-items: center;
}

.footer img {
  margin-left: 0.5rem;
}

.footer a {
  display: flex;
  justify-content: center;
  align-items: center;
}

.title a {
  color: #0070f3;
  text-decoration: none;
}

.title a:hover,
.title a:focus,
.title a:active {
  text-decoration: underline;
}

.title {
  margin: 0;
  line-height: 1.15;
  font-size: 3rem;
}

.title,
.description {
  text-align: center;
}

.description {
  line-height: 1.5;
  font-size: 1.5rem;
}

.code {
  background: #fafafa;
  border-radius: 5px;
  padding: 0.75rem;
  font-size: 1.1rem;
  font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
    Bitstream Vera Sans Mono, Courier New, monospace;
}

.grid {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  max-width: 400px;
  margin-top: 3rem;
}

.card {
  margin: 0.5rem;
  flex-basis: 45%;
  padding: 1rem;
  text-align: left;
  color: inherit;
  text-decoration: none;
  border: 1px solid #eaeaea;
  border-radius: 10px;
  transition: color 0.15s ease, border-color 0.15s ease;
}

.apiButton {
  margin: 0.5rem;
  flex-basis: 45%;
  padding: 1rem;
  color: white;
  background-color: #0152ae;
  border: none;
  padding: 10px 15px;
  border-radius: 10px;
  cursor: pointer;
}

.apiButton:hover,
.apiButton:focus,
.apiButton:active {
  outline: none;
}

.apiButton:hover {
  background-color: #0071f2;
}

.logo {
  height: 1em;
  margin-left: 0.5rem;
  margin-right: 0.5rem;
}

@media (max-width: 600px) {
  .grid {
    width: 100%;
    flex-direction: column;
  }
}

.loader,
.loader:after {
  border-radius: 50%;
  width: 10em;
  height: 10em;
}
.loader {
  top: 30px;
  right: 30px;
  font-size: 3px;
  position: fixed;
  text-indent: -9999em;
  border-top: 1.1em solid rgb(59, 177, 255);
  border-right: 1.1em solid rgb(59, 177, 255);
  border-bottom: 1.1em solid rgb(59, 177, 255);
  border-left: 1.1em solid #ffffff;
  -webkit-transform: translateZ(0);
  -ms-transform: translateZ(0);
  transform: translateZ(0);
  -webkit-animation: load8 1.1s infinite linear;
  animation: load8 1.1s infinite linear;
}
@-webkit-keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
@keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}

.hidden {
  display: none;
}

.code {
  background-color: black;
  color: white;
  max-height: 400px;
  overflow: scroll;
  font-size: 1rem;
}",
    "path": "styles/Home.module.css",
  },
  "styles/globals.css": Object {
    "content": "html,
body {
  padding: 0;
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
}

a {
  color: inherit;
  text-decoration: none;
}

* {
  box-sizing: border-box;
}",
    "path": "styles/globals.css",
  },
  "tsconfig.json": Object {
    "content": "{
  \\"compilerOptions\\": {
    \\"target\\": \\"es5\\",
    \\"lib\\": [\\"dom\\", \\"dom.iterable\\", \\"esnext\\"],
    \\"skipLibCheck\\": true,
    \\"strict\\": true,
    \\"forceConsistentCasingInFileNames\\": true,
    \\"noEmit\\": true,
    \\"esModuleInterop\\": true,
    \\"module\\": \\"esnext\\",
    \\"moduleResolution\\": \\"node\\",
    \\"resolveJsonModule\\": true,
    \\"isolatedModules\\": true,
    \\"jsx\\": \\"preserve\\",
    \\"sourceMap\\": true,
    \\"outDir\\": \\"dist\\",
    \\"allowJs\\": true
  },
  \\"include\\": [\\"next-env.d.ts\\", \\"**/*.ts\\", \\"**/*.tsx\\"],
  \\"exclude\\": [\\"node_modules\\"],
  \\"ts-node\\": {
    \\"compilerOptions\\": {
      \\"module\\": \\"commonjs\\"
    }
  }
}",
    "path": "tsconfig.json",
  },
}
`;

exports[`files Empty 1`] = `
Object {
  ".gitignore": Object {
    "content": "node_modules/
dist/
*.env*",
    "path": ".gitignore",
  },
  "README.md": Object {
    "content": "# Empty Prisma Project

An empty Prisma Schema with no models, perfect as a starting point for your own schema.",
    "path": "README.md",
  },
  "package.json": Object {
    "content": "{
  \\"name\\": \\"empty\\",
  \\"description\\": \\"An empty schema with no models, to build your own your own schema\\",
  \\"license\\": \\"UNLICENSED\\",
  \\"dependencies\\": {
    \\"@prisma/client\\": \\"3.15.2\\"
  },
  \\"devDependencies\\": {
    \\"@types/node\\": \\"17.0.21\\",
    \\"prisma\\": \\"3.15.2\\",
    \\"ts-node\\": \\"10.5.0\\",
    \\"typescript\\": \\"4.5.5\\"
  },
  \\"scripts\\": {
    \\"dev\\": \\"ts-node ./sandbox.ts\\"
  }
}",
    "path": "package.json",
  },
  "prisma/schema.prisma": Object {
    "content": "// An empty Prisma Schema with no models, perfect as a starting point for your own schema.

datasource db {
  provider = \\"postgresql\\"
  url      = env(\\"DATABASE_URL\\")
}

generator client {
  provider = \\"prisma-client-js\\"
}",
    "path": "prisma/schema.prisma",
  },
  "public/index.html": Object {
    "content": "<html>
  <head>
    <title>Empty Template</title>

    <link rel=\\"icon\\" type=\\"image/svg\\" href=\\"prisma.svg\\" />
    <style>
      @font-face {
        font-family: Inter;
        font-weight: 400;
        src: url('https://cdn.jsdelivr.net/npm/@fontsource/inter/files/inter-latin-400-normal.woff2')
            format('woff2'),
          url('https://cdn.jsdelivr.net/npm/@fontsource/inter/files/inter-latin-400-normal.woff')
            format('woff');
      }

      @font-face {
        font-family: Inter;
        font-weight: 900;
        src: url('https://cdn.jsdelivr.net/npm/@fontsource/inter/files/inter-latin-900-normal.woff2')
            format('woff2'),
          url('https://cdn.jsdelivr.net/npm/@fontsource/inter/files/inter-latin-900-normal.woff')
            format('woff');
      }
    </style>

    <style>
      :root {
        --prisma-blue: #1a202c;
        --white: #ffffff;
        --green: #34d399;
        --black: #000000;
        --gray: rgba(0, 0, 0, 0.75);
      }
    </style>

    <style>
      body {
        margin: 0;
        padding: 0;
        font-size: 16px;
      }
      * {
        box-sizing: border-box;
      }
      h1,
      h2,
      h3,
      h4,
      h5,
      h6,
      p {
        margin: 0;
      }

      #hero {
        background: var(--prisma-blue);
        height: 60%;
        color: var(--white);
        font-family: Inter, sans-serif;
        display: flex;
        flex-direction: column;
        align-items: center;
      }

      #prisma-logo {
        padding: 50px;
      }

      #hero-text {
        display: flex;
        flex-direction: column;
        align-items: center;
        flex: 1;
      }

      #title {
        font-size: 72px;
        font-weight: 900;
        line-height: 1;
      }

      #subtitle {
        font-size: 24px;
        font-weight: 400;
        margin: 20px;
      }
      #subtitle a {
        color: var(--white) !important;
      }
    </style>
  </head>

  <body>
    <section id=\\"hero\\">
      <header style=\\"flex: 1\\">
        <img src=\\"prisma.svg\\" alt=\\"Prisma logo\\" id=\\"prisma-logo\\" />
      </header>
      <div id=\\"hero-text\\">
        <h1 id=\\"title\\">Empty Template</h1>
        <h3 id=\\"subtitle\\">
          Generated by
          <a href=\\"https://cloud.prisma.io\\" target=\\"_blank\\"
            >Prisma Data Platform</a
          >
        </h3>
      </div>
      <div style=\\"flex: 1\\"></div>
    </section>
  </body>
</html>",
    "path": "public/index.html",
  },
  "public/prisma.svg": Object {
    "content": "<svg width=\\"32\\" height=\\"40\\" viewBox=\\"0 0 32 40\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">
<path fill-rule=\\"evenodd\\" clip-rule=\\"evenodd\\" d=\\"M0.28825 24.9389C-0.101619 25.5764 -0.0955847 26.3808 0.303803 27.0124L7.5326 38.4434C8.00176 39.1853 8.90609 39.5236 9.74539 39.2712L30.606 32.9977C31.7444 32.6554 32.3172 31.3823 31.8196 30.3003L18.4094 1.13932C17.7554 -0.282788 15.7839 -0.399522 14.9675 0.935524L0.28825 24.9389ZM18.1058 7.79741C17.8205 7.13653 16.854 7.23832 16.7124 7.94418L11.5428 33.7038C11.4338 34.247 11.9419 34.7108 12.4724 34.5524L26.9042 30.2411C27.3254 30.1153 27.5424 29.6497 27.368 29.2458L18.1058 7.79741Z\\" fill=\\"white\\"/>
</svg>",
    "path": "public/prisma.svg",
  },
  "sandbox.ts": Object {
    "content": "import { PrismaClient } from \\"@prisma/client\\";

export async function seed() {
  const prisma = new PrismaClient();
}",
    "path": "sandbox.ts",
  },
}
`;

exports[`files Music Streaming Service 1`] = `
Object {
  ".gitignore": Object {
    "content": "node_modules/
dist/
*.env*
.vercel",
    "path": ".gitignore",
  },
  "README.md": Object {
    "content": "# Music Streaming Service

![Database diagram](https://raw.githubusercontent.com/prisma/prisma-schema-examples/main/Music%20Streaming%20Service/diagram.png)

(Generated via https://github.com/notiz-dev/prisma-dbml-generator + https://dbdiagram.io)

### Setting this project up locally

Once you clone your repo, you'll want to set up this repo for local development. In order to start using Prisma locally, you need to make Prisma aware of your database. The most portable way to do this is to use environment variables via a \`.env\` file.

1. You'll see that your Prisma Schema file (at \`prisma/schema.prisma\`) is already configured to use an environment variable called \`DATABASE_URL\`. [Read more about environment variables in Prisma](https://www.prisma.io/docs/concepts/more/environment-variables)
2. You'll need a database to connect to. You may use the same one you used while setting this project up on the Prisma Data Platform, but we recommend setting up a local database and use that during development. If you're new to databases, we recommend [reading up](https://www.prisma.io/dataguide/) on them. This guide also has instructions on how to set up a local database.
3. Once you have a locally accessible database connection string, create a new file called \`.env\` in the \`prisma\` directory, and populate it with: \`DATABASE_URL=\\"<replace-me-with-your-connection-string>\\"\`. Prisma will automatically pick up the environment variable used in the schema and use its value to connect to your database.
4. Now you can run \`npm run init\` to set up your local database. This will create tables corresponding to models in your Prisma Schema and populate them with fake data for you to play around with.
   - [Read more about the Prisma Schema](https://www.prisma.io/docs/concepts/components/prisma-schema)
   - [Read more about database seeding](https://www.prisma.io/docs/guides/database/seed-database)

To learn more about Prisma, we recommend reading through our [Getting Started guide](https://www.prisma.io/docs/getting-started)",
    "path": "README.md",
  },
  "api/album.ts": Object {
    "content": "import { PrismaClient, Prisma } from '@prisma/client'
import { VercelRequest, VercelResponse } from '@vercel/node'

type VercelRequestQuery = {
  id?: string
}

export default async function (req: VercelRequest, res: VercelResponse) {
  try {
    const { id } = req.query as VercelRequestQuery
    const prisma = new PrismaClient()

    console.log(
      '[album] Incoming request:',
      JSON.stringify(
        {
          method: req.method,
          query: req.query,
          body: req.body,
        },
        null,
        2,
      ),
    )

    switch (req.method) {
      case 'GET':
        return res.json(
          await prisma.album.findMany({
            where: { id },
          }),
        )
      case 'POST':
        return res.json(
          await prisma.album.create({
            data: req.body as Prisma.AlbumCreateInput,
          }),
        )
      case 'PUT':
        return res.json(
          await prisma.album.update({
            where: {
              id,
            },
            data: req.body as Prisma.AlbumUpdateInput,
          }),
        )
      case 'DELETE':
        return res.json(
          await prisma.album.delete({
            where: { id },
          }),
        )
    }

    return res
      .status(400)
      .send({ message: \`Unexpected request method: \${req.method}\` })
  } catch (e: any) {
    console.error('[album] Error responding:', e)
    return res.status(500).json({ message: e?.message || e })
  }
}",
    "path": "api/album.ts",
  },
  "api/artist.ts": Object {
    "content": "import { PrismaClient, Prisma } from '@prisma/client'
import { VercelRequest, VercelResponse } from '@vercel/node'

type VercelRequestQuery = {
  id?: string
}

export default async function (req: VercelRequest, res: VercelResponse) {
  try {
    const { id } = req.query as VercelRequestQuery
    const prisma = new PrismaClient()

    console.log(
      '[artist] Incoming request:',
      JSON.stringify(
        {
          method: req.method,
          query: req.query,
          body: req.body,
        },
        null,
        2,
      ),
    )

    switch (req.method) {
      case 'GET':
        return res.json(
          await prisma.artist.findMany({
            where: { id },
          }),
        )
      case 'POST':
        return res.json(
          await prisma.artist.create({
            data: req.body as Prisma.ArtistCreateInput,
          }),
        )
      case 'PUT':
        return res.json(
          await prisma.artist.update({
            where: {
              id,
            },
            data: req.body as Prisma.ArtistUpdateInput,
          }),
        )
      case 'DELETE':
        return res.json(
          await prisma.artist.delete({
            where: { id },
          }),
        )
    }

    return res
      .status(400)
      .send({ message: \`Unexpected request method: \${req.method}\` })
  } catch (e: any) {
    console.error('[artist] Error responding:', e)
    return res.status(500).json({ message: e?.message || e })
  }
}",
    "path": "api/artist.ts",
  },
  "api/interaction.ts": Object {
    "content": "import { PrismaClient, Prisma } from '@prisma/client'
import { VercelRequest, VercelResponse } from '@vercel/node'

type VercelRequestQuery = {
  id?: string
}

export default async function (req: VercelRequest, res: VercelResponse) {
  try {
    const { id } = req.query as VercelRequestQuery
    const prisma = new PrismaClient()

    console.log(
      '[interaction] Incoming request:',
      JSON.stringify(
        {
          method: req.method,
          query: req.query,
          body: req.body,
        },
        null,
        2,
      ),
    )

    switch (req.method) {
      case 'GET':
        return res.json(
          await prisma.interaction.findMany({
            where: { id },
          }),
        )
      case 'POST':
        return res.json(
          await prisma.interaction.create({
            data: req.body as Prisma.InteractionCreateInput,
          }),
        )
      case 'PUT':
        return res.json(
          await prisma.interaction.update({
            where: {
              id,
            },
            data: req.body as Prisma.InteractionUpdateInput,
          }),
        )
      case 'DELETE':
        return res.json(
          await prisma.interaction.delete({
            where: { id },
          }),
        )
    }

    return res
      .status(400)
      .send({ message: \`Unexpected request method: \${req.method}\` })
  } catch (e: any) {
    console.error('[interaction] Error responding:', e)
    return res.status(500).json({ message: e?.message || e })
  }
}",
    "path": "api/interaction.ts",
  },
  "api/playlist.ts": Object {
    "content": "import { PrismaClient, Prisma } from '@prisma/client'
import { VercelRequest, VercelResponse } from '@vercel/node'

type VercelRequestQuery = {
  id?: string
}

export default async function (req: VercelRequest, res: VercelResponse) {
  try {
    const { id } = req.query as VercelRequestQuery
    const prisma = new PrismaClient()

    console.log(
      '[playlist] Incoming request:',
      JSON.stringify(
        {
          method: req.method,
          query: req.query,
          body: req.body,
        },
        null,
        2,
      ),
    )

    switch (req.method) {
      case 'GET':
        return res.json(
          await prisma.playlist.findMany({
            where: { id },
          }),
        )
      case 'POST':
        return res.json(
          await prisma.playlist.create({
            data: req.body as Prisma.PlaylistCreateInput,
          }),
        )
      case 'PUT':
        return res.json(
          await prisma.playlist.update({
            where: {
              id,
            },
            data: req.body as Prisma.PlaylistUpdateInput,
          }),
        )
      case 'DELETE':
        return res.json(
          await prisma.playlist.delete({
            where: { id },
          }),
        )
    }

    return res
      .status(400)
      .send({ message: \`Unexpected request method: \${req.method}\` })
  } catch (e: any) {
    console.error('[playlist] Error responding:', e)
    return res.status(500).json({ message: e?.message || e })
  }
}",
    "path": "api/playlist.ts",
  },
  "api/song.ts": Object {
    "content": "import { PrismaClient, Prisma } from '@prisma/client'
import { VercelRequest, VercelResponse } from '@vercel/node'

type VercelRequestQuery = {
  id?: string
}

export default async function (req: VercelRequest, res: VercelResponse) {
  try {
    const { id } = req.query as VercelRequestQuery
    const prisma = new PrismaClient()

    console.log(
      '[song] Incoming request:',
      JSON.stringify(
        {
          method: req.method,
          query: req.query,
          body: req.body,
        },
        null,
        2,
      ),
    )

    switch (req.method) {
      case 'GET':
        return res.json(
          await prisma.song.findMany({
            where: { id },
          }),
        )
      case 'POST':
        return res.json(
          await prisma.song.create({
            data: req.body as Prisma.SongCreateInput,
          }),
        )
      case 'PUT':
        return res.json(
          await prisma.song.update({
            where: {
              id,
            },
            data: req.body as Prisma.SongUpdateInput,
          }),
        )
      case 'DELETE':
        return res.json(
          await prisma.song.delete({
            where: { id },
          }),
        )
    }

    return res
      .status(400)
      .send({ message: \`Unexpected request method: \${req.method}\` })
  } catch (e: any) {
    console.error('[song] Error responding:', e)
    return res.status(500).json({ message: e?.message || e })
  }
}",
    "path": "api/song.ts",
  },
  "api/user.ts": Object {
    "content": "import { PrismaClient, Prisma } from '@prisma/client'
import { VercelRequest, VercelResponse } from '@vercel/node'

type VercelRequestQuery = {
  id?: string
}

export default async function (req: VercelRequest, res: VercelResponse) {
  try {
    const { id } = req.query as VercelRequestQuery
    const prisma = new PrismaClient()

    console.log(
      '[user] Incoming request:',
      JSON.stringify(
        {
          method: req.method,
          query: req.query,
          body: req.body,
        },
        null,
        2,
      ),
    )

    switch (req.method) {
      case 'GET':
        return res.json(
          await prisma.user.findMany({
            where: { id },
          }),
        )
      case 'POST':
        return res.json(
          await prisma.user.create({
            data: req.body as Prisma.UserCreateInput,
          }),
        )
      case 'PUT':
        return res.json(
          await prisma.user.update({
            where: {
              id,
            },
            data: req.body as Prisma.UserUpdateInput,
          }),
        )
      case 'DELETE':
        return res.json(
          await prisma.user.delete({
            where: { id },
          }),
        )
    }

    return res
      .status(400)
      .send({ message: \`Unexpected request method: \${req.method}\` })
  } catch (e: any) {
    console.error('[user] Error responding:', e)
    return res.status(500).json({ message: e?.message || e })
  }
}",
    "path": "api/user.ts",
  },
  "package.json": Object {
    "content": "{
  \\"name\\": \\"music-streaming-service\\",
  \\"description\\": \\"Schema for a fictional music streaming service with a REST API\\",
  \\"license\\": \\"UNLICENSED\\",
  \\"dependencies\\": {
    \\"@prisma/client\\": \\"3.15.2\\"
  },
  \\"devDependencies\\": {
    \\"@types/faker\\": \\"5.5.9\\",
    \\"@types/node\\": \\"17.0.21\\",
    \\"@vercel/node\\": \\"1.13.0\\",
    \\"faker\\": \\"5.5.3\\",
    \\"prisma\\": \\"3.15.2\\",
    \\"ts-node\\": \\"10.5.0\\",
    \\"typescript\\": \\"4.5.5\\"
  },
  \\"prisma\\": {
    \\"seed\\": \\"ts-node ./prisma/seed.ts\\"
  },
  \\"scripts\\": {
    \\"init\\": \\"prisma db push && prisma db seed\\",
    \\"dev\\": \\"ts-node ./sandbox.ts\\"
  }
}",
    "path": "package.json",
  },
  "prisma/schema.prisma": Object {
    "content": "// Schema for a fictional music streaming service
// This service contains songs, albums, artists & playlists, and tracks user interactions with each of them

generator client {
  provider = \\"prisma-client-js\\"
}

datasource db {
  provider = \\"postgresql\\"
  url      = env(\\"DATABASE_URL\\")
}

model User {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  email        String        @unique
  interactions Interaction[]
  playlists    Playlist[]
}

model Interaction {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  songId    String?
  userId    String?
  isLiked   Boolean  @default(false)
  playCount Int
  song      Song?    @relation(fields: [songId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model Song {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  albumId      String?
  artistId     String
  length       Float
  track        Int?
  lyrics       String?
  fileUrl      String
  album        Album?        @relation(fields: [albumId], references: [id])
  artist       Artist        @relation(fields: [artistId], references: [id])
  interactions Interaction[]
  playlist     Playlist[]
}

model Artist {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  songs     Song[]
  albums    Album[]
}

model Album {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  cover     String
  songs     Song[]
  artists   Artist[]
}

model Playlist {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  name      String
  user      User?    @relation(fields: [userId], references: [id])
  songs     Song[]
}",
    "path": "prisma/schema.prisma",
  },
  "prisma/seed.ts": Object {
    "content": "import { PrismaClient } from '@prisma/client'
import faker from 'faker'

const prisma = new PrismaClient()

const MAX_NUMBER_OF_SONGS_PER_ARTIST = 5
const NUMBER_OF_ARTISTS = 5
const NUMBER_OF_USERS = 10

const userIds = Array.from({
  length: NUMBER_OF_USERS,
}).map(() => faker.datatype.uuid())

async function main() {
  // Create artists
  await prisma.artist.createMany({
    data: Array.from({ length: NUMBER_OF_ARTISTS }).map(() => ({
      name: faker.name.firstName(),
    })),
  })

  const artists = await prisma.artist.findMany()

  // Create songs for each artist
  for (const artist of artists) {
    await prisma.album.create({
      data: {
        cover: faker.image.imageUrl(),
        name: faker.random.words(2),
        artists: {
          connect: {
            id: artist.id,
          },
        },
        songs: {
          create: Array.from({
            length: faker.datatype.number({
              min: 2,
              max: MAX_NUMBER_OF_SONGS_PER_ARTIST,
            }),
          }).map(() => ({
            artistId: artist.id,
            fileUrl: faker.internet.url(),
            length: faker.datatype.float(),
            name: faker.name.firstName(),
          })),
        },
      },
    })
  }

  // Create songs
  const songs = await prisma.song.findMany()

  for (const userId of userIds) {
    // Create users
    await prisma.user.create({
      data: {
        id: userId,
        email: faker.internet.email(),
        name: faker.name.firstName(),
        interactions: {
          create: Array.from({
            length: faker.datatype.number({
              min: 3,
              max: songs.length,
            }),
          }).map(() => ({
            playCount: faker.datatype.number({ min: 1, max: 1000 }),
            songId:
              songs[faker.datatype.number({ min: 0, max: songs.length - 1 })]
                .id,
            // random boolean
            isLiked: Math.random() < 0.5,
          })),
        },
      },
    })

    // Create Playlists
    await prisma.playlist.create({
      data: {
        name: faker.random.words(2),
        user: {
          connect: {
            id: userId,
          },
        },
        // each playlist will have a random list of songs
        songs: {
          connect: songs
            .slice(0, faker.datatype.number({ min: 1, max: songs.length - 1 }))
            .map(({ id }) => ({ id })),
        },
      },
    })
  }
}

main().finally(async () => {
  await prisma.$disconnect()
})",
    "path": "prisma/seed.ts",
  },
  "public/index.html": Object {
    "content": "<html>
  <head>
    <title>Music Streaming Service Template</title>

    <link rel=\\"icon\\" type=\\"image/svg\\" href=\\"prisma.svg\\" />
    <style>
      @font-face {
        font-family: Inter;
        font-weight: 400;
        src: url('https://cdn.jsdelivr.net/npm/@fontsource/inter/files/inter-latin-400-normal.woff2')
            format('woff2'),
          url('https://cdn.jsdelivr.net/npm/@fontsource/inter/files/inter-latin-400-normal.woff')
            format('woff');
      }

      @font-face {
        font-family: Inter;
        font-weight: 900;
        src: url('https://cdn.jsdelivr.net/npm/@fontsource/inter/files/inter-latin-900-normal.woff2')
            format('woff2'),
          url('https://cdn.jsdelivr.net/npm/@fontsource/inter/files/inter-latin-900-normal.woff')
            format('woff');
      }
    </style>

    <style>
      :root {
        --prisma-blue: #1a202c;
        --prisma-blue-lighter: #2b3853;
        --white: #ffffff;
        --green: #34d399;
        --black: #000000;
        --gray: rgba(0, 0, 0, 0.75);
      }
    </style>

    <style>
      body {
        margin: 0;
        padding: 0;
        font-size: 16px;
      }
      * {
        box-sizing: border-box;
      }
      h1,
      h2,
      h3,
      h4,
      h5,
      h6,
      p {
        margin: 0;
      }

      #hero {
        background: var(--prisma-blue);
        background: linear-gradient(
          -135deg,
          var(--prisma-blue) 0%,
          var(--prisma-blue-lighter) 100%
        );
        height: 60%;
        color: var(--white);
        font-family: Inter, sans-serif;
        display: flex;
        flex-direction: column;
        align-items: center;
      }

      #prisma-logo {
        padding: 50px;
      }

      #hero-text {
        display: flex;
        flex-direction: column;
        align-items: center;
        flex: 1;
      }

      #title {
        font-size: 72px;
        font-weight: 900;
        line-height: 1;
      }

      #subtitle {
        font-size: 24px;
        font-weight: 400;
        margin: 20px;
      }
      #subtitle a {
        color: var(--white) !important;
      }

      #docs {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        margin: 0 auto;
        width: 100%;
        padding: 40px;
      }

      #docs .title {
        color: var(--gray);
        font-family: Inter, sans-serif;
        font-weight: 900;
        margin-bottom: 20px;
      }

      #docs article {
        font-family: monospace;
        margin: 40px;
      }
      #docs article h3 {
        font-family: monospace;
        font-size: 24px;
        color: var(--gray);
        text-align: center;
      }

      #docs article ul {
        list-style: none;
      }

      #docs article ul li {
        display: grid;
        grid-template-columns: 1fr 2fr 3fr;
        margin: 10px;
      }
      #docs article ul li .method {
        color: var(--green);
        text-align: right;
        grid-column: 1 / 2;
        margin-right: 20px;
      }
      #docs article ul li .url {
        color: var(--black);
        grid-column: 2 / 3;
        margin-right: 60px;
      }
      #docs article ul li .description {
        color: var(--gray);
        grid-column: 3 / 4;
      }
    </style>
  </head>

  <body>
    <section id=\\"hero\\">
      <header style=\\"flex: 1\\">
        <img src=\\"prisma.svg\\" alt=\\"Prisma logo\\" id=\\"prisma-logo\\" />
      </header>
      <div id=\\"hero-text\\">
        <h1 id=\\"title\\">Music Streaming Service Template</h1>
        <h3 id=\\"subtitle\\">
          Generated by
          <a href=\\"https://cloud.prisma.io\\" target=\\"_blank\\"
            >Prisma Data Platform</a
          >
        </h3>
      </div>
      <div style=\\"flex: 1\\"></div>
    </section>

    <section id=\\"docs\\">
      <h1 class=\\"title\\">API Endpoints</h1>
    </section>

    <script>
      const docs = [
        {
          model: 'User',
          endpoints: [
            {
              method: 'GET',
              url: '/api/user',
              description: 'Get all users',
            },
            {
              method: 'GET',
              url: '/api/user?id=:id',
              description: 'Get a single user',
            },
            {
              method: 'POST',
              url: '/api/userd',
              description: 'Create a single user',
            },
            {
              method: 'PUT',
              url: '/api/user?id=:id',
              description: 'Update a single user',
            },
            {
              method: 'DELETE',
              url: '/api/user?id=:id',
              description: 'Delete a single user',
            },
          ],
        },
        {
          model: 'Interaction',
          endpoints: [
            {
              method: 'GET',
              url: '/api/interaction',
              description: 'Get all interactions',
            },
            {
              method: 'GET',
              url: '/api/interaction?id=:id',
              description: 'Get a single interaction',
            },
            {
              method: 'POST',
              url: '/api/interaction',
              description: 'Create a single interaction',
            },
            {
              method: 'PUT',
              url: '/api/interaction?id=:id',
              description: 'Update a single interaction',
            },
            {
              method: 'DELETE',
              url: '/api/interaction?id=:id',
              description: 'Delete a single interaction',
            },
          ],
        },
        {
          model: 'Song',
          endpoints: [
            {
              method: 'GET',
              url: '/api/song',
              description: 'Get all songs',
            },
            {
              method: 'GET',
              url: '/api/song?id=:id',
              description: 'Get a single song',
            },
            {
              method: 'POST',
              url: '/api/song',
              description: 'Create a single song',
            },
            {
              method: 'PUT',
              url: '/api/song?id=:id',
              description: 'Update a single song',
            },
            {
              method: 'DELETE',
              url: '/api/song?id=:id',
              description: 'Delete a single song',
            },
          ],
        },
        {
          model: 'Artist',
          endpoints: [
            {
              method: 'GET',
              url: '/api/artist',
              description: 'Get all artists',
            },
            {
              method: 'GET',
              url: '/api/artist?id=:id',
              description: 'Get a single artist',
            },
            {
              method: 'POST',
              url: '/api/artist',
              description: 'Create a single artist',
            },
            {
              method: 'PUT',
              url: '/api/artist?id=:id',
              description: 'Update a single artist',
            },
            {
              method: 'DELETE',
              url: '/api/artist?id=:id',
              description: 'Delete a single artist',
            },
          ],
        },
        {
          model: 'Album',
          endpoints: [
            {
              method: 'GET',
              url: '/api/album',
              description: 'Get all albums',
            },
            {
              method: 'GET',
              url: '/api/album?id=:id',
              description: 'Get a single album',
            },
            {
              method: 'POST',
              url: '/api/album',
              description: 'Create a single album',
            },
            {
              method: 'PUT',
              url: '/api/album?id=:id',
              description: 'Update a single album',
            },
            {
              method: 'DELETE',
              url: '/api/album?id=:id',
              description: 'Delete a single album',
            },
          ],
        },
        {
          model: 'Playlist',
          endpoints: [
            {
              method: 'GET',
              url: '/api/playlist',
              description: 'Get all playlists',
            },
            {
              method: 'GET',
              url: '/api/playlist?id=:id',
              description: 'Get a single playlist',
            },
            {
              method: 'POST',
              url: '/api/playlist',
              description: 'Create a single playlist',
            },
            {
              method: 'PUT',
              url: '/api/playlist?id=:id',
              description: 'Update a single playlist',
            },
            {
              method: 'DELETE',
              url: '/api/playlist?id=:id',
              description: 'Delete a single playlist',
            },
          ],
        },
      ]

      // Rendering
      const container = document.getElementById('docs')

      for (const group of docs) {
        const article = document.createElement('article')

        const title = document.createElement('h3')
        title.innerText = group.model
        article.appendChild(title)

        const ul = document.createElement('ul')
        for (const endpoint of group.endpoints) {
          const li = document.createElement('li')
          li.classList.add('endpoint')

          const method = document.createElement('p')
          method.classList.add('method')
          method.innerText = endpoint.method
          li.appendChild(method)

          const url = document.createElement('p')
          url.classList.add('url')
          url.innerText = endpoint.url
          li.appendChild(url)

          const description = document.createElement('p')
          description.classList.add('description')
          description.innerText = endpoint.description
          li.appendChild(description)

          ul.appendChild(li)
        }
        article.appendChild(ul)

        container.appendChild(article)
      }
    </script>
  </body>
</html>",
    "path": "public/index.html",
  },
  "public/prisma.svg": Object {
    "content": "<svg width=\\"32\\" height=\\"40\\" viewBox=\\"0 0 32 40\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">
<path fill-rule=\\"evenodd\\" clip-rule=\\"evenodd\\" d=\\"M0.28825 24.9389C-0.101619 25.5764 -0.0955847 26.3808 0.303803 27.0124L7.5326 38.4434C8.00176 39.1853 8.90609 39.5236 9.74539 39.2712L30.606 32.9977C31.7444 32.6554 32.3172 31.3823 31.8196 30.3003L18.4094 1.13932C17.7554 -0.282788 15.7839 -0.399522 14.9675 0.935524L0.28825 24.9389ZM18.1058 7.79741C17.8205 7.13653 16.854 7.23832 16.7124 7.94418L11.5428 33.7038C11.4338 34.247 11.9419 34.7108 12.4724 34.5524L26.9042 30.2411C27.3254 30.1153 27.5424 29.6497 27.368 29.2458L18.1058 7.79741Z\\" fill=\\"white\\"/>
</svg>",
    "path": "public/prisma.svg",
  },
  "sandbox.ts": Object {
    "content": "import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

const main = async () => {
  const albums = await prisma.album.findMany({
    where: {
      name: {
        contains: ' ',
      },
    },
  })

  console.log('Albums that have more than 1 word: ', albums)
}

main()
  .catch((e) => console.error('Error in Prisma Client query: ', e))
  .finally(async () => await prisma.$disconnect())",
    "path": "sandbox.ts",
  },
  "tsconfig.json": Object {
    "content": "{
  \\"compilerOptions\\": {
    \\"sourceMap\\": true,
    \\"outDir\\": \\"dist\\",
    \\"strict\\": true,
    \\"lib\\": [\\"esnext\\", \\"dom\\"],
    \\"esModuleInterop\\": true
  }
}",
    "path": "tsconfig.json",
  },
}
`;

exports[`files Rentals Platform 1`] = `
Object {
  ".gitignore": Object {
    "content": "node_modules/
dist/
*.env*
.vercel",
    "path": ".gitignore",
  },
  "README.md": Object {
    "content": "# Rentals Platform

![Database diagram](https://raw.githubusercontent.com/prisma/prisma-schema-examples/main/Rentals%20Platform/diagram.png)

(Generated via https://github.com/notiz-dev/prisma-dbml-generator + https://dbdiagram.io)

### Setting this project up locally

Once you clone your repo, you'll want to set up this repo for local development. In order to start using Prisma locally, you need to make Prisma aware of your database. The most portable way to do this is to use environment variables via a \`.env\` file.

1. You'll see that your Prisma Schema file (at \`prisma/schema.prisma\`) is already configured to use an environment variable called \`DATABASE_URL\`. [Read more about environment variables in Prisma](https://www.prisma.io/docs/concepts/more/environment-variables)
2. You'll need a database to connect to. You may use the same one you used while setting this project up on the Prisma Data Platform, but we recommend setting up a local database and use that during development. If you're new to databases, we recommend [reading up](https://www.prisma.io/dataguide/) on them. This guide also has instructions on how to set up a local database.
3. Once you have a locally accessible database connection string, create a new file called \`.env\` in the \`prisma\` directory, and populate it with: \`DATABASE_URL=\\"<replace-me-with-your-connection-string>\\"\`. Prisma will automatically pick up the environment variable used in the schema and use its value to connect to your database.
4. Now you can run \`npm run init\` to set up your local database. This will create tables corresponding to models in your Prisma Schema and populate them with fake data for you to play around with.
   - [Read more about the Prisma Schema](https://www.prisma.io/docs/concepts/components/prisma-schema)
   - [Read more about database seeding](https://www.prisma.io/docs/guides/database/seed-database)

To learn more about Prisma, we recommend reading through our [Getting Started guide](https://www.prisma.io/docs/getting-started)",
    "path": "README.md",
  },
  "api/media.ts": Object {
    "content": "import { PrismaClient, Prisma } from '@prisma/client'
import { VercelRequest, VercelResponse } from '@vercel/node'

type VercelRequestQuery = {
  id?: string
}

export default async function (req: VercelRequest, res: VercelResponse) {
  try {
    const { id } = req.query as VercelRequestQuery
    const prisma = new PrismaClient()

    console.log(
      '[media] Incoming request:',
      JSON.stringify(
        {
          method: req.method,
          query: req.query,
          body: req.body,
        },
        null,
        2,
      ),
    )

    switch (req.method) {
      case 'GET':
        return res.json(
          await prisma.media.findMany({
            where: { id },
          }),
        )
      case 'POST':
        return res.json(
          await prisma.media.create({
            data: req.body as Prisma.MediaCreateInput,
          }),
        )
      case 'PUT':
        return res.json(
          await prisma.media.update({
            where: {
              id,
            },
            data: req.body as Prisma.MediaUpdateInput,
          }),
        )
      case 'DELETE':
        return res.json(
          await prisma.media.delete({
            where: { id },
          }),
        )
    }

    return res
      .status(400)
      .send({ message: \`Unexpected request method: \${req.method}\` })
  } catch (e: any) {
    console.error('[media] Error responding:', e)
    return res.status(500).json({ message: e?.message || e })
  }
}",
    "path": "api/media.ts",
  },
  "api/reservation.ts": Object {
    "content": "import { PrismaClient, Prisma } from '@prisma/client'
import { VercelRequest, VercelResponse } from '@vercel/node'

type VercelRequestQuery = {
  id?: string
}

export default async function (req: VercelRequest, res: VercelResponse) {
  try {
    const { id } = req.query as VercelRequestQuery
    const prisma = new PrismaClient()

    console.log(
      '[reservation] Incoming request:',
      JSON.stringify(
        {
          method: req.method,
          query: req.query,
          body: req.body,
        },
        null,
        2,
      ),
    )

    switch (req.method) {
      case 'GET':
        return res.json(
          await prisma.reservation.findMany({
            where: { id },
          }),
        )
      case 'POST':
        return res.json(
          await prisma.reservation.create({
            data: req.body as Prisma.ReservationCreateInput,
          }),
        )
      case 'PUT':
        return res.json(
          await prisma.reservation.update({
            where: {
              id,
            },
            data: req.body as Prisma.ReservationUpdateInput,
          }),
        )
      case 'DELETE':
        return res.json(
          await prisma.reservation.delete({
            where: { id },
          }),
        )
    }

    return res
      .status(400)
      .send({ message: \`Unexpected request method: \${req.method}\` })
  } catch (e: any) {
    console.error('[reservation] Error responding:', e)
    return res.status(500).json({ message: e?.message || e })
  }
}",
    "path": "api/reservation.ts",
  },
  "api/review.ts": Object {
    "content": "import { PrismaClient, Prisma } from '@prisma/client'
import { VercelRequest, VercelResponse } from '@vercel/node'

type VercelRequestQuery = {
  id?: string
}

export default async function (req: VercelRequest, res: VercelResponse) {
  try {
    const { id } = req.query as VercelRequestQuery
    const prisma = new PrismaClient()

    console.log(
      '[review] Incoming request:',
      JSON.stringify(
        {
          method: req.method,
          query: req.query,
          body: req.body,
        },
        null,
        2,
      ),
    )

    switch (req.method) {
      case 'GET':
        return res.json(
          await prisma.review.findMany({
            where: { id },
          }),
        )
      case 'POST':
        return res.json(
          await prisma.review.create({
            data: req.body as Prisma.ReviewCreateInput,
          }),
        )
      case 'PUT':
        return res.json(
          await prisma.review.update({
            where: {
              id,
            },
            data: req.body as Prisma.ReviewUpdateInput,
          }),
        )
      case 'DELETE':
        return res.json(
          await prisma.review.delete({
            where: { id },
          }),
        )
    }

    return res
      .status(400)
      .send({ message: \`Unexpected request method: \${req.method}\` })
  } catch (e: any) {
    console.error('[review] Error responding:', e)
    return res.status(500).json({ message: e?.message || e })
  }
}",
    "path": "api/review.ts",
  },
  "api/room.ts": Object {
    "content": "import { PrismaClient, Prisma } from '@prisma/client'
import { VercelRequest, VercelResponse } from '@vercel/node'

type VercelRequestQuery = {
  id?: string
}

export default async function (req: VercelRequest, res: VercelResponse) {
  try {
    const { id } = req.query as VercelRequestQuery
    const prisma = new PrismaClient()

    console.log(
      '[room] Incoming request:',
      JSON.stringify(
        {
          method: req.method,
          query: req.query,
          body: req.body,
        },
        null,
        2,
      ),
    )

    switch (req.method) {
      case 'GET':
        return res.json(
          await prisma.room.findMany({
            where: { id },
          }),
        )
      case 'POST':
        return res.json(
          await prisma.room.create({
            data: req.body as Prisma.RoomCreateInput,
          }),
        )
      case 'PUT':
        return res.json(
          await prisma.room.update({
            where: {
              id,
            },
            data: req.body as Prisma.RoomUpdateInput,
          }),
        )
      case 'DELETE':
        return res.json(
          await prisma.room.delete({
            where: { id },
          }),
        )
    }

    return res
      .status(400)
      .send({ message: \`Unexpected request method: \${req.method}\` })
  } catch (e: any) {
    console.error('[room] Error responding:', e)
    return res.status(500).json({ message: e?.message || e })
  }
}",
    "path": "api/room.ts",
  },
  "api/user.ts": Object {
    "content": "import { PrismaClient, Prisma } from '@prisma/client'
import { VercelRequest, VercelResponse } from '@vercel/node'

type VercelRequestQuery = {
  id?: string
}

export default async function (req: VercelRequest, res: VercelResponse) {
  try {
    const { id } = req.query as VercelRequestQuery
    const prisma = new PrismaClient()

    console.log(
      '[user] Incoming request:',
      JSON.stringify(
        {
          method: req.method,
          query: req.query,
          body: req.body,
        },
        null,
        2,
      ),
    )

    switch (req.method) {
      case 'GET':
        return res.json(
          await prisma.user.findMany({
            where: { id },
          }),
        )
      case 'POST':
        return res.json(
          await prisma.user.create({
            data: req.body as Prisma.UserCreateInput,
          }),
        )
      case 'PUT':
        return res.json(
          await prisma.user.update({
            where: {
              id,
            },
            data: req.body as Prisma.UserUpdateInput,
          }),
        )
      case 'DELETE':
        return res.json(
          await prisma.user.delete({
            where: { id },
          }),
        )
    }

    return res
      .status(400)
      .send({ message: \`Unexpected request method: \${req.method}\` })
  } catch (e: any) {
    console.error('[user] Error responding:', e)
    return res.status(500).json({ message: e?.message || e })
  }
}",
    "path": "api/user.ts",
  },
  "package.json": Object {
    "content": "{
  \\"name\\": \\"rentals-platform\\",
  \\"description\\": \\"Schema for a fictional hotel with a REST API\\",
  \\"license\\": \\"UNLICENSED\\",
  \\"dependencies\\": {
    \\"@prisma/client\\": \\"3.15.2\\"
  },
  \\"devDependencies\\": {
    \\"@types/faker\\": \\"5.5.9\\",
    \\"@types/node\\": \\"17.0.21\\",
    \\"@vercel/node\\": \\"1.13.0\\",
    \\"faker\\": \\"5.5.3\\",
    \\"prisma\\": \\"3.15.2\\",
    \\"ts-node\\": \\"10.5.0\\",
    \\"typescript\\": \\"4.5.5\\"
  },
  \\"prisma\\": {
    \\"seed\\": \\"ts-node ./prisma/seed.ts\\"
  },
  \\"scripts\\": {
    \\"init\\": \\"prisma db push && prisma db seed\\",
    \\"dev\\": \\"ts-node ./sandbox.ts\\"
  }
}",
    "path": "package.json",
  },
  "prisma/schema.prisma": Object {
    "content": "// Schema for a fictional hotel
// This hotel tracks rooms, user reservations & reviews

generator client {
  provider = \\"prisma-client-js\\"
}

datasource db {
  provider = \\"postgresql\\"
  url      = env(\\"DATABASE_URL\\")
}

model User {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  email        String        @unique
  name         String
  reservations Reservation[]
  reviews      Review[]
}

model Reservation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  startDate DateTime
  endDate   DateTime
  price     Int
  total     Int
  roomId    String?
  room      Room?    @relation(fields: [roomId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model Room {
  id                 String        @id @default(uuid())
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  totalOccupancy     Int           @default(5)
  totalBedrooms      Int           @default(5)
  totalBathrooms     Int           @default(5)
  summary            String?
  address            String
  isSmoking          Boolean       @default(false)
  hasTV              Boolean       @default(true)
  hasAirConditioning Boolean       @default(true)
  hasHeating         Boolean       @default(true)
  hasWIFI            Boolean       @default(true)
  price              Int
  media              Media[]
  reservations       Reservation[]
}

model Review {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int
  comment   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Media {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roomId    String?
  fileName  String
  room      Room?    @relation(fields: [roomId], references: [id])
}",
    "path": "prisma/schema.prisma",
  },
  "prisma/seed.ts": Object {
    "content": "import { PrismaClient } from '@prisma/client'
import faker from 'faker'

const prisma = new PrismaClient()

const NUMBER_OF_USERS = 10
const NUMBER_OF_ROOMS = 20

const roomIds = Array.from({
  length: NUMBER_OF_ROOMS,
}).map(() => faker.datatype.uuid())

const rooms = Array.from({
  length: NUMBER_OF_ROOMS,
}).map((_, i) => ({
  id: roomIds[i],
  price: faker.datatype.number({
    min: 50,
    max: 600,
  }),
  // random address - example: b-365
  address: \`\${faker.address.streetPrefix()}-\${faker.datatype.number({
    min: 300,
    max: 1,
  })}\`,
  totalOccupancy: faker.datatype.number({ min: 1, max: 5 }),
  totalBedrooms: faker.datatype.number({ min: 1, max: 5 }),
  totalBathrooms: faker.datatype.number({ min: 1, max: 5 }),
  summary: faker.lorem.paragraph(),
  media: Array.from({
    length: faker.datatype.number({ min: 1, max: 5 }),
  }).map(() => ({
    fileName: faker.image.imageUrl(),
  })),
}))

const data = Array.from({ length: NUMBER_OF_USERS }).map(() => ({
  email: faker.internet.email(),
  name: faker.name.firstName(),
  reviews: Array.from({
    length: faker.datatype.number({
      max: 1,
      min: 4,
    }),
  }).map(() => ({
    comment: faker.lorem.paragraph(),
    rating: faker.datatype.number({
      max: 1,
      min: 5,
    }),
  })),
  // create random reservations per user
  reservations: Array.from({
    length: faker.datatype.number({
      min: 1,
      max: 4,
    }),
  }).map(() => {
    const startDate = faker.date.past()
    const endDate = faker.date.future()
    const price = faker.datatype.number({
      min: 50,
      max: 600,
    })
    return {
      startDate,
      endDate,
      price,
      total:
        Math.ceil(Math.abs(+endDate - +startDate) / (1000 * 60 * 60 * 24)) *
        price, // difference between dates * price
      room: {
        connect: {
          id: roomIds[
            faker.datatype.number({
              min: 0,
              max: NUMBER_OF_ROOMS - 1,
            })
          ],
        },
      },
    }
  }),
}))

async function main() {
  rooms.forEach(
    async (room) =>
      await prisma.room.create({
        data: {
          id: room.id,
          address: room.address,
          price: room.price,
          summary: room.summary,
          media: {
            create: room.media,
          },
        },
      }),
  )

  for (let entry of data) {
    await prisma.user.create({
      data: {
        email: entry.email,
        name: entry.name,
        reservations: {
          create: entry.reservations,
        },
        reviews: {
          create: entry.reviews,
        },
      },
    })
  }
}

main().finally(async () => {
  await prisma.$disconnect()
})",
    "path": "prisma/seed.ts",
  },
  "public/index.html": Object {
    "content": "<html>
  <head>
    <title>Rentals Platform Template</title>

    <link rel=\\"icon\\" type=\\"image/svg\\" href=\\"prisma.svg\\" />
    <style>
      @font-face {
        font-family: Inter;
        font-weight: 400;
        src: url('https://cdn.jsdelivr.net/npm/@fontsource/inter/files/inter-latin-400-normal.woff2')
            format('woff2'),
          url('https://cdn.jsdelivr.net/npm/@fontsource/inter/files/inter-latin-400-normal.woff')
            format('woff');
      }

      @font-face {
        font-family: Inter;
        font-weight: 900;
        src: url('https://cdn.jsdelivr.net/npm/@fontsource/inter/files/inter-latin-900-normal.woff2')
            format('woff2'),
          url('https://cdn.jsdelivr.net/npm/@fontsource/inter/files/inter-latin-900-normal.woff')
            format('woff');
      }
    </style>

    <style>
      :root {
        --prisma-blue: #1a202c;
        --prisma-blue-lighter: #2b3853;
        --white: #ffffff;
        --green: #34d399;
        --black: #000000;
        --gray: rgba(0, 0, 0, 0.75);
      }
    </style>

    <style>
      body {
        margin: 0;
        padding: 0;
        font-size: 16px;
      }
      * {
        box-sizing: border-box;
      }
      h1,
      h2,
      h3,
      h4,
      h5,
      h6,
      p {
        margin: 0;
      }

      #hero {
        background: var(--prisma-blue);
        background: linear-gradient(
          -135deg,
          var(--prisma-blue) 0%,
          var(--prisma-blue-lighter) 100%
        );
        height: 60%;
        color: var(--white);
        font-family: Inter, sans-serif;
        display: flex;
        flex-direction: column;
        align-items: center;
      }

      #prisma-logo {
        padding: 50px;
      }

      #hero-text {
        display: flex;
        flex-direction: column;
        align-items: center;
        flex: 1;
      }

      #title {
        font-size: 72px;
        font-weight: 900;
        line-height: 1;
        text-align: center;
      }

      #subtitle {
        font-size: 24px;
        font-weight: 400;
        margin: 20px;
        text-align: center;
      }
      #subtitle a {
        color: var(--white) !important;
      }

      #docs {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        margin: 0 auto;
        width: 100%;
        padding: 40px;
      }

      #docs .title {
        color: var(--gray);
        font-family: Inter, sans-serif;
        font-weight: 900;
        margin-bottom: 20px;
      }

      #docs article {
        font-family: monospace;
        margin: 40px;
      }
      #docs article h3 {
        font-family: monospace;
        font-size: 24px;
        color: var(--gray);
        text-align: center;
      }

      #docs article ul {
        list-style: none;
      }

      #docs article ul li {
        display: grid;
        grid-template-columns: 1fr 2fr 3fr;
        margin: 10px;
      }
      #docs article ul li .method {
        color: var(--green);
        text-align: right;
        grid-column: 1 / 2;
        margin-right: 20px;
      }
      #docs article ul li .url {
        color: var(--black);
        grid-column: 2 / 3;
        margin-right: 60px;
      }
      #docs article ul li .description {
        color: var(--gray);
        grid-column: 3 / 4;
      }
    </style>
  </head>

  <body>
    <section id=\\"hero\\">
      <header style=\\"flex: 1\\">
        <img src=\\"prisma.svg\\" alt=\\"Prisma logo\\" id=\\"prisma-logo\\" />
      </header>
      <div id=\\"hero-text\\">
        <h1 id=\\"title\\">Rentals Platform Template</h1>
        <h3 id=\\"subtitle\\">
          Generated by
          <a href=\\"https://cloud.prisma.io\\" target=\\"_blank\\"
            >Prisma Data Platform</a
          >
        </h3>
      </div>
      <div style=\\"flex: 1\\"></div>
    </section>

    <section id=\\"docs\\">
      <h1 class=\\"title\\">API Endpoints</h1>
    </section>

    <script>
      const docs = [
        {
          model: 'User',
          endpoints: [
            {
              method: 'GET',
              url: '/api/users',
              description: 'Get all users',
            },
            {
              method: 'GET',
              url: '/api/users?id=:id',
              description: 'Get a single user',
            },
            {
              method: 'POST',
              url: '/api/usersd',
              description: 'Create a single user',
            },
            {
              method: 'PUT',
              url: '/api/users?id=:id',
              description: 'Update a single user',
            },
            {
              method: 'DELETE',
              url: '/api/users?id=:id',
              description: 'Delete a single user',
            },
          ],
        },
        {
          model: 'Reservation',
          endpoints: [
            {
              method: 'GET',
              url: '/api/reservation',
              description: 'Get all reservation',
            },
            {
              method: 'GET',
              url: '/api/reservation?id=:id',
              description: 'Get a single account',
            },
            {
              method: 'POST',
              url: '/api/reservationd',
              description: 'Create a single account',
            },
            {
              method: 'PUT',
              url: '/api/reservation?id=:id',
              description: 'Update a single account',
            },
            {
              method: 'DELETE',
              url: '/api/reservation?id=:id',
              description: 'Delete a single account',
            },
          ],
        },
        {
          model: 'Room',
          endpoints: [
            {
              method: 'GET',
              url: '/api/room',
              description: 'Get all rooms',
            },
            {
              method: 'GET',
              url: '/api/room?id=:id',
              description: 'Get a single room',
            },
            {
              method: 'POST',
              url: '/api/room',
              description: 'Create a single room',
            },
            {
              method: 'PUT',
              url: '/api/room?id=:id',
              description: 'Update a single room',
            },
            {
              method: 'DELETE',
              url: '/api/room?id=:id',
              description: 'Delete a single room',
            },
          ],
        },
        {
          model: 'Review',
          endpoints: [
            {
              method: 'GET',
              url: '/api/review',
              description: 'Get all reviews',
            },
            {
              method: 'GET',
              url: '/api/review?id=:id',
              description: 'Get a single review',
            },
            {
              method: 'POST',
              url: '/api/review',
              description: 'Create a single review',
            },
            {
              method: 'PUT',
              url: '/api/review?id=:id',
              description: 'Update a single review',
            },
            {
              method: 'DELETE',
              url: '/api/review?id=:id',
              description: 'Delete a single review',
            },
          ],
        },
        {
          model: 'Media',
          endpoints: [
            {
              method: 'GET',
              url: '/api/media',
              description: 'Get all media',
            },
            {
              method: 'GET',
              url: '/api/media?id=:id',
              description: 'Get a single media',
            },
            {
              method: 'POST',
              url: '/api/media',
              description: 'Create a single media',
            },
            {
              method: 'PUT',
              url: '/api/media?id=:id',
              description: 'Update a single media',
            },
            {
              method: 'DELETE',
              url: '/api/media?id=:id',
              description: 'Delete a single media',
            },
          ],
        },
      ]

      // Rendering
      const container = document.getElementById('docs')

      for (const group of docs) {
        const article = document.createElement('article')

        const title = document.createElement('h3')
        title.innerText = group.model
        article.appendChild(title)

        const ul = document.createElement('ul')
        for (const endpoint of group.endpoints) {
          const li = document.createElement('li')
          li.classList.add('endpoint')

          const method = document.createElement('p')
          method.classList.add('method')
          method.innerText = endpoint.method
          li.appendChild(method)

          const url = document.createElement('p')
          url.classList.add('url')
          url.innerText = endpoint.url
          li.appendChild(url)

          const description = document.createElement('p')
          description.classList.add('description')
          description.innerText = endpoint.description
          li.appendChild(description)

          ul.appendChild(li)
        }
        article.appendChild(ul)

        container.appendChild(article)
      }
    </script>
  </body>
</html>",
    "path": "public/index.html",
  },
  "public/prisma.svg": Object {
    "content": "<svg width=\\"32\\" height=\\"40\\" viewBox=\\"0 0 32 40\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">
<path fill-rule=\\"evenodd\\" clip-rule=\\"evenodd\\" d=\\"M0.28825 24.9389C-0.101619 25.5764 -0.0955847 26.3808 0.303803 27.0124L7.5326 38.4434C8.00176 39.1853 8.90609 39.5236 9.74539 39.2712L30.606 32.9977C31.7444 32.6554 32.3172 31.3823 31.8196 30.3003L18.4094 1.13932C17.7554 -0.282788 15.7839 -0.399522 14.9675 0.935524L0.28825 24.9389ZM18.1058 7.79741C17.8205 7.13653 16.854 7.23832 16.7124 7.94418L11.5428 33.7038C11.4338 34.247 11.9419 34.7108 12.4724 34.5524L26.9042 30.2411C27.3254 30.1153 27.5424 29.6497 27.368 29.2458L18.1058 7.79741Z\\" fill=\\"white\\"/>
</svg>",
    "path": "public/prisma.svg",
  },
  "sandbox.ts": Object {
    "content": "import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

const main = async () => {
  const reservations = await prisma.reservation.findMany({
    where: {
      price: {
        gte: 300,
      },
    },
  })

  console.log('Expensive reservations: ', reservations)
}

main()
  .catch((e) => console.error('Error in Prisma Client query: ', e))
  .finally(async () => await prisma.$disconnect())",
    "path": "sandbox.ts",
  },
  "tsconfig.json": Object {
    "content": "{
  \\"compilerOptions\\": {
    \\"sourceMap\\": true,
    \\"outDir\\": \\"dist\\",
    \\"strict\\": true,
    \\"lib\\": [\\"esnext\\", \\"dom\\"],
    \\"esModuleInterop\\": true
  }
}",
    "path": "tsconfig.json",
  },
}
`;

exports[`files SaaS 1`] = `
Object {
  ".gitignore": Object {
    "content": "node_modules/
dist/
*.env*
.vercel",
    "path": ".gitignore",
  },
  "README.md": Object {
    "content": "# SaaS

Generic Prisma schema example for a SaaS that has a referral system.

![Database diagram](https://raw.githubusercontent.com/prisma/prisma-schema-examples/main/SaaS/diagram.png)

(Generated via https://github.com/notiz-dev/prisma-dbml-generator + https://dbdiagram.io)

### Setting this project up locally

Once you clone your repo, you'll want to set up this repo for local development. In order to start using Prisma locally, you need to make Prisma aware of your database. The most portable way to do this is to use environment variables via a \`.env\` file.

1. You'll see that your Prisma Schema file (at \`prisma/schema.prisma\`) is already configured to use an environment variable called \`DATABASE_URL\`. [Read more about environment variables in Prisma](https://www.prisma.io/docs/concepts/more/environment-variables)
2. You'll need a database to connect to. You may use the same one you used while setting this project up on the Prisma Data Platform, but we recommend setting up a local database and use that during development. If you're new to databases, we recommend [reading up](https://www.prisma.io/dataguide/) on them. This guide also has instructions on how to set up a local database.
3. Once you have a locally accessible database connection string, create a new file called \`.env\` in the \`prisma\` directory, and populate it with: \`DATABASE_URL=\\"<replace-me-with-your-connection-string>\\"\`. Prisma will automatically pick up the environment variable used in the schema and use its value to connect to your database.
4. Now you can run \`npm run init\` to set up your local database. This will create tables corresponding to models in your Prisma Schema and populate them with fake data for you to play around with.
   - [Read more about the Prisma Schema](https://www.prisma.io/docs/concepts/components/prisma-schema)
   - [Read more about database seeding](https://www.prisma.io/docs/guides/database/seed-database)

To learn more about Prisma, we recommend reading through our [Getting Started guide](https://www.prisma.io/docs/getting-started)",
    "path": "README.md",
  },
  "api/account.ts": Object {
    "content": "import { PrismaClient, Prisma } from '@prisma/client'
import { VercelRequest, VercelResponse } from '@vercel/node'

type VercelRequestQuery = {
  id?: string
}

export default async function (req: VercelRequest, res: VercelResponse) {
  try {
    const { id } = req.query as VercelRequestQuery
    const prisma = new PrismaClient()

    console.log(
      '[account] Incoming request:',
      JSON.stringify(
        {
          method: req.method,
          query: req.query,
          body: req.body,
        },
        null,
        2,
      ),
    )

    switch (req.method) {
      case 'GET':
        return res.json(
          await prisma.account.findMany({
            where: { id },
          }),
        )
      case 'POST':
        return res.json(
          await prisma.account.create({
            data: req.body as Prisma.AccountCreateInput,
          }),
        )
      case 'PUT':
        return res.json(
          await prisma.account.update({
            where: {
              id,
            },
            data: req.body as Prisma.AccountUpdateInput,
          }),
        )
      case 'DELETE':
        return res.json(
          await prisma.account.delete({
            where: { id },
          }),
        )
    }

    return res
      .status(400)
      .send({ message: \`Unexpected request method: \${req.method}\` })
  } catch (e: any) {
    console.error('[account] Error responding:', e)
    return res.status(500).json({ message: e?.message || e })
  }
}",
    "path": "api/account.ts",
  },
  "api/invite.ts": Object {
    "content": "import { PrismaClient, Prisma } from '@prisma/client'
import { VercelRequest, VercelResponse } from '@vercel/node'

type VercelRequestQuery = {
  id?: string
}

export default async function (req: VercelRequest, res: VercelResponse) {
  try {
    const { id } = req.query as VercelRequestQuery
    const prisma = new PrismaClient()

    console.log(
      '[invite] Incoming request:',
      JSON.stringify(
        {
          method: req.method,
          query: req.query,
          body: req.body,
        },
        null,
        2,
      ),
    )

    switch (req.method) {
      case 'GET':
        return res.json(
          await prisma.invite.findMany({
            where: { id },
          }),
        )
      case 'POST':
        return res.json(
          await prisma.invite.create({
            data: req.body as Prisma.InviteCreateInput,
          }),
        )
      case 'PUT':
        return res.json(
          await prisma.invite.update({
            where: {
              id,
            },
            data: req.body as Prisma.InviteUpdateInput,
          }),
        )
      case 'DELETE':
        return res.json(
          await prisma.invite.delete({
            where: { id },
          }),
        )
    }

    return res
      .status(400)
      .send({ message: \`Unexpected request method: \${req.method}\` })
  } catch (e: any) {
    console.error('[invite] Error responding:', e)
    return res.status(500).json({ message: e?.message || e })
  }
}",
    "path": "api/invite.ts",
  },
  "api/user.ts": Object {
    "content": "import { PrismaClient, Prisma } from '@prisma/client'
import { VercelRequest, VercelResponse } from '@vercel/node'

type VercelRequestQuery = {
  id?: string
}

export default async function (req: VercelRequest, res: VercelResponse) {
  try {
    const { id } = req.query as VercelRequestQuery
    const prisma = new PrismaClient()

    console.log(
      '[user] Incoming request:',
      JSON.stringify(
        {
          method: req.method,
          query: req.query,
          body: req.body,
        },
        null,
        2,
      ),
    )

    switch (req.method) {
      case 'GET':
        return res.json(
          await prisma.user.findMany({
            where: { id },
          }),
        )
      case 'POST':
        return res.json(
          await prisma.user.create({
            data: req.body as Prisma.UserCreateInput,
          }),
        )
      case 'PUT':
        return res.json(
          await prisma.user.update({
            where: {
              id,
            },
            data: req.body as Prisma.UserUpdateInput,
          }),
        )
      case 'DELETE':
        return res.json(
          await prisma.user.delete({
            where: { id },
          }),
        )
    }

    return res
      .status(400)
      .send({ message: \`Unexpected request method: \${req.method}\` })
  } catch (e: any) {
    console.error('[user] Error responding:', e)
    return res.status(500).json({ message: e?.message || e })
  }
}",
    "path": "api/user.ts",
  },
  "package.json": Object {
    "content": "{
  \\"name\\": \\"saas\\",
  \\"description\\": \\"Schema for an identity service for a SaaS with a REST API\\",
  \\"license\\": \\"UNLICENSED\\",
  \\"dependencies\\": {
    \\"@prisma/client\\": \\"3.15.2\\"
  },
  \\"devDependencies\\": {
    \\"@types/faker\\": \\"5.5.9\\",
    \\"@types/node\\": \\"17.0.21\\",
    \\"@vercel/node\\": \\"1.13.0\\",
    \\"faker\\": \\"5.5.3\\",
    \\"prisma\\": \\"3.15.2\\",
    \\"ts-node\\": \\"10.5.0\\",
    \\"typescript\\": \\"4.5.5\\"
  },
  \\"prisma\\": {
    \\"seed\\": \\"ts-node ./prisma/seed.ts\\"
  },
  \\"scripts\\": {
    \\"init\\": \\"prisma db push && prisma db seed\\",
    \\"dev\\": \\"ts-node ./sandbox.ts\\"
  }
}",
    "path": "package.json",
  },
  "prisma/schema.prisma": Object {
    "content": "// Schema for an identity service for a SaaS
// This service tracks existing users & their accounts, as well as invites for users who haven't joined yet

generator client {
  provider = \\"prisma-client-js\\"
}

datasource db {
  provider = \\"postgresql\\"
  url      = env(\\"DATABASE_URL\\")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  email     String
  accountId String?
  account   Account? @relation(fields: [accountId], references: [id])
}

model Account {
  id                   String   @id @default(uuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  stripeCustomerId     String
  stripeSubscriptionId String
  referrer             String?
  isActive             Boolean
  invites              Invite[]
  users                User[]
}

model Invite {
  id        String   @id @default(uuid())
  dateSent  DateTime @default(now())
  email     String
  accountId String?
  isValid   Boolean  @default(true)
  account   Account? @relation(fields: [accountId], references: [id])
}",
    "path": "prisma/schema.prisma",
  },
  "prisma/seed.ts": Object {
    "content": "import { PrismaClient } from '@prisma/client'
import faker from 'faker'

const prisma = new PrismaClient()

const NUMBER_OF_USERS = 4
const NUMBER_OF_INVITES = 4

const data = Array.from({ length: NUMBER_OF_USERS }).map(() => ({
  email: faker.internet.email(),
  name: faker.name.firstName(),
  account: {
    stripeCustomerId: faker.datatype.uuid(),
    stripeSubscriptionId: faker.datatype.uuid(),
    isActive: true,
  },
  invites: Array.from({
    length: faker.datatype.number({ min: 0, max: NUMBER_OF_INVITES }),
  }).map(() => ({
    email: faker.internet.email(),
    dateSent: faker.date.future(),
  })),
}))

async function main() {
  for (let entry of data) {
    await prisma.user.create({
      data: {
        name: entry.name,
        email: entry.email,
        account: {
          create: {
            stripeCustomerId: entry.account.stripeCustomerId,
            stripeSubscriptionId: entry.account.stripeSubscriptionId,
            isActive: true,
            invites: {
              create: entry.invites,
            },
          },
        },
      },
    })
  }
}

main().finally(async () => {
  await prisma.$disconnect()
})",
    "path": "prisma/seed.ts",
  },
  "public/index.html": Object {
    "content": "<html>
  <head>
    <title>SaaS Template</title>

    <link rel=\\"icon\\" type=\\"image/svg\\" href=\\"prisma.svg\\" />
    <style>
      @font-face {
        font-family: Inter;
        font-weight: 400;
        src: url('https://cdn.jsdelivr.net/npm/@fontsource/inter/files/inter-latin-400-normal.woff2')
            format('woff2'),
          url('https://cdn.jsdelivr.net/npm/@fontsource/inter/files/inter-latin-400-normal.woff')
            format('woff');
      }

      @font-face {
        font-family: Inter;
        font-weight: 900;
        src: url('https://cdn.jsdelivr.net/npm/@fontsource/inter/files/inter-latin-900-normal.woff2')
            format('woff2'),
          url('https://cdn.jsdelivr.net/npm/@fontsource/inter/files/inter-latin-900-normal.woff')
            format('woff');
      }
    </style>

    <style>
      :root {
        --prisma-blue: #1a202c;
        --prisma-blue-lighter: #2b3853;
        --white: #ffffff;
        --green: #34d399;
        --black: #000000;
        --gray: rgba(0, 0, 0, 0.75);
      }
    </style>

    <style>
      body {
        margin: 0;
        padding: 0;
        font-size: 16px;
      }
      * {
        box-sizing: border-box;
      }
      h1,
      h2,
      h3,
      h4,
      h5,
      h6,
      p {
        margin: 0;
      }

      #hero {
        background: var(--prisma-blue);
        background: linear-gradient(
          -135deg,
          var(--prisma-blue) 0%,
          var(--prisma-blue-lighter) 100%
        );
        height: 60%;
        color: var(--white);
        font-family: Inter, sans-serif;
        display: flex;
        flex-direction: column;
        align-items: center;
      }

      #prisma-logo {
        padding: 50px;
      }

      #hero-text {
        display: flex;
        flex-direction: column;
        align-items: center;
        flex: 1;
      }

      #title {
        font-size: 72px;
        font-weight: 900;
        line-height: 1;
      }

      #subtitle {
        font-size: 24px;
        font-weight: 400;
        margin: 20px;
      }
      #subtitle a {
        color: var(--white) !important;
      }

      #docs {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        margin: 0 auto;
        width: 100%;
        padding: 40px;
      }

      #docs .title {
        color: var(--gray);
        font-family: Inter, sans-serif;
        font-weight: 900;
        margin-bottom: 20px;
      }

      #docs article {
        font-family: monospace;
        margin: 40px;
      }
      #docs article h3 {
        font-family: monospace;
        font-size: 24px;
        color: var(--gray);
        text-align: center;
      }

      #docs article ul {
        list-style: none;
      }

      #docs article ul li {
        display: grid;
        grid-template-columns: 1fr 2fr 3fr;
        margin: 10px;
      }
      #docs article ul li .method {
        color: var(--green);
        text-align: right;
        grid-column: 1 / 2;
        margin-right: 20px;
      }
      #docs article ul li .url {
        color: var(--black);
        grid-column: 2 / 3;
        margin-right: 60px;
      }
      #docs article ul li .description {
        color: var(--gray);
        grid-column: 3 / 4;
      }
    </style>
  </head>

  <body>
    <section id=\\"hero\\">
      <header style=\\"flex: 1\\">
        <img src=\\"prisma.svg\\" alt=\\"Prisma logo\\" id=\\"prisma-logo\\" />
      </header>
      <div id=\\"hero-text\\">
        <h1 id=\\"title\\">SaaS Template</h1>
        <h3 id=\\"subtitle\\">
          Generated by
          <a href=\\"https://cloud.prisma.io\\" target=\\"_blank\\"
            >Prisma Data Platform</a
          >
        </h3>
      </div>
      <div style=\\"flex: 1\\"></div>
    </section>

    <section id=\\"docs\\">
      <h1 class=\\"title\\">API Endpoints</h1>
    </section>

    <script>
      const docs = [
        {
          model: 'User',
          endpoints: [
            {
              method: 'GET',
              url: '/api/user',
              description: 'Get all users',
            },
            {
              method: 'GET',
              url: '/api/user?id=:id',
              description: 'Get a single user',
            },
            {
              method: 'POST',
              url: '/api/userd',
              description: 'Create a single user',
            },
            {
              method: 'PUT',
              url: '/api/user?id=:id',
              description: 'Update a single user',
            },
            {
              method: 'DELETE',
              url: '/api/user?id=:id',
              description: 'Delete a single user',
            },
          ],
        },
        {
          model: 'Account',
          endpoints: [
            {
              method: 'GET',
              url: '/api/account',
              description: 'Get all accounts',
            },
            {
              method: 'GET',
              url: '/api/account?id=:id',
              description: 'Get a single account',
            },
            {
              method: 'POST',
              url: '/api/accountd',
              description: 'Create a single account',
            },
            {
              method: 'PUT',
              url: '/api/account?id=:id',
              description: 'Update a single account',
            },
            {
              method: 'DELETE',
              url: '/api/account?id=:id',
              description: 'Delete a single account',
            },
          ],
        },
        {
          model: 'Invite',
          endpoints: [
            {
              method: 'GET',
              url: '/api/invite',
              description: 'Get all invites',
            },
            {
              method: 'GET',
              url: '/api/invite?id=:id',
              description: 'Get a single invite',
            },
            {
              method: 'POST',
              url: '/api/invited',
              description: 'Create a single invite',
            },
            {
              method: 'PUT',
              url: '/api/invite?id=:id',
              description: 'Update a single invite',
            },
            {
              method: 'DELETE',
              url: '/api/invite?id=:id',
              description: 'Delete a single invite',
            },
          ],
        },
      ]

      // Rendering
      const container = document.getElementById('docs')

      for (const group of docs) {
        const article = document.createElement('article')

        const title = document.createElement('h3')
        title.innerText = group.model
        article.appendChild(title)

        const ul = document.createElement('ul')
        for (const endpoint of group.endpoints) {
          const li = document.createElement('li')
          li.classList.add('endpoint')

          const method = document.createElement('p')
          method.classList.add('method')
          method.innerText = endpoint.method
          li.appendChild(method)

          const url = document.createElement('p')
          url.classList.add('url')
          url.innerText = endpoint.url
          li.appendChild(url)

          const description = document.createElement('p')
          description.classList.add('description')
          description.innerText = endpoint.description
          li.appendChild(description)

          ul.appendChild(li)
        }
        article.appendChild(ul)

        container.appendChild(article)
      }
    </script>
  </body>
</html>",
    "path": "public/index.html",
  },
  "public/prisma.svg": Object {
    "content": "<svg width=\\"32\\" height=\\"40\\" viewBox=\\"0 0 32 40\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">
<path fill-rule=\\"evenodd\\" clip-rule=\\"evenodd\\" d=\\"M0.28825 24.9389C-0.101619 25.5764 -0.0955847 26.3808 0.303803 27.0124L7.5326 38.4434C8.00176 39.1853 8.90609 39.5236 9.74539 39.2712L30.606 32.9977C31.7444 32.6554 32.3172 31.3823 31.8196 30.3003L18.4094 1.13932C17.7554 -0.282788 15.7839 -0.399522 14.9675 0.935524L0.28825 24.9389ZM18.1058 7.79741C17.8205 7.13653 16.854 7.23832 16.7124 7.94418L11.5428 33.7038C11.4338 34.247 11.9419 34.7108 12.4724 34.5524L26.9042 30.2411C27.3254 30.1153 27.5424 29.6497 27.368 29.2458L18.1058 7.79741Z\\" fill=\\"white\\"/>
</svg>",
    "path": "public/prisma.svg",
  },
  "sandbox.ts": Object {
    "content": "import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

const main = async () => {
  const accounts = await prisma.account.findMany({
    where: {
      isActive: true,
    },
  })

  console.log('Premium accounts: ', accounts)
}

main()
  .catch((e) => console.error('Error in Prisma Client query: ', e))
  .finally(async () => await prisma.$disconnect())",
    "path": "sandbox.ts",
  },
  "tsconfig.json": Object {
    "content": "{
  \\"compilerOptions\\": {
    \\"sourceMap\\": true,
    \\"outDir\\": \\"dist\\",
    \\"strict\\": true,
    \\"lib\\": [\\"esnext\\", \\"dom\\"],
    \\"esModuleInterop\\": true
  }
}",
    "path": "tsconfig.json",
  },
}
`;

exports[`files URL Shortener 1`] = `
Object {
  ".gitignore": Object {
    "content": "node_modules/
dist/
*.env*
.vercel",
    "path": ".gitignore",
  },
  "README.md": Object {
    "content": "# URL Shortener

![Database diagram](https://raw.githubusercontent.com/prisma/prisma-schema-examples/main/URL%20Shortener/diagram.png)

(Generated via https://github.com/notiz-dev/prisma-dbml-generator + https://dbdiagram.io)

### Setting this project up locally

Once you clone your repo, you'll want to set up this repo for local development. In order to start using Prisma locally, you need to make Prisma aware of your database. The most portable way to do this is to use environment variables via a \`.env\` file.

1. You'll see that your Prisma Schema file (at \`prisma/schema.prisma\`) is already configured to use an environment variable called \`DATABASE_URL\`. [Read more about environment variables in Prisma](https://www.prisma.io/docs/concepts/more/environment-variables)
2. You'll need a database to connect to. You may use the same one you used while setting this project up on the Prisma Data Platform, but we recommend setting up a local database and use that during development. If you're new to databases, we recommend [reading up](https://www.prisma.io/dataguide/) on them. This guide also has instructions on how to set up a local database.
3. Once you have a locally accessible database connection string, create a new file called \`.env\` in the \`prisma\` directory, and populate it with: \`DATABASE_URL=\\"<replace-me-with-your-connection-string>\\"\`. Prisma will automatically pick up the environment variable used in the schema and use its value to connect to your database.
4. Now you can run \`npm run init\` to set up your local database. This will create tables corresponding to models in your Prisma Schema and populate them with fake data for you to play around with.
   - [Read more about the Prisma Schema](https://www.prisma.io/docs/concepts/components/prisma-schema)
   - [Read more about database seeding](https://www.prisma.io/docs/guides/database/seed-database)

To learn more about Prisma, we recommend reading through our [Getting Started guide](https://www.prisma.io/docs/getting-started)",
    "path": "README.md",
  },
  "api/link.ts": Object {
    "content": "import { PrismaClient, Prisma } from '@prisma/client'
import { VercelRequest, VercelResponse } from '@vercel/node'

type VercelRequestQuery = {
  id?: string
}

export default async function (req: VercelRequest, res: VercelResponse) {
  try {
    const { id } = req.query as VercelRequestQuery
    const prisma = new PrismaClient()

    console.log(
      '[link] Incoming request:',
      JSON.stringify(
        {
          method: req.method,
          query: req.query,
          body: req.body,
        },
        null,
        2,
      ),
    )

    switch (req.method) {
      case 'GET':
        return res.json(
          await prisma.link.findMany({
            where: { id },
          }),
        )
      case 'POST':
        return res.json(
          await prisma.link.create({
            data: req.body as Prisma.LinkCreateInput,
          }),
        )
      case 'PUT':
        return res.json(
          await prisma.link.update({
            where: {
              id,
            },
            data: req.body as Prisma.LinkUpdateInput,
          }),
        )
      case 'DELETE':
        return res.json(
          await prisma.link.delete({
            where: { id },
          }),
        )
    }

    return res
      .status(400)
      .send({ message: \`Unexpected request method: \${req.method}\` })
  } catch (e: any) {
    console.error('[link] Error responding:', e)
    return res.status(500).json({ message: e?.message || e })
  }
}",
    "path": "api/link.ts",
  },
  "api/user.ts": Object {
    "content": "import { PrismaClient, Prisma } from '@prisma/client'
import { VercelRequest, VercelResponse } from '@vercel/node'

type VercelRequestQuery = {
  id?: string
}

export default async function (req: VercelRequest, res: VercelResponse) {
  try {
    const { id } = req.query as VercelRequestQuery
    const prisma = new PrismaClient()

    console.log(
      '[user] Incoming request:',
      JSON.stringify(
        {
          method: req.method,
          query: req.query,
          body: req.body,
        },
        null,
        2,
      ),
    )

    switch (req.method) {
      case 'GET':
        return res.json(
          await prisma.user.findMany({
            where: { id },
          }),
        )
      case 'POST':
        return res.json(
          await prisma.user.create({
            data: req.body as Prisma.UserCreateInput,
          }),
        )
      case 'PUT':
        return res.json(
          await prisma.user.update({
            where: {
              id,
            },
            data: req.body as Prisma.UserUpdateInput,
          }),
        )
      case 'DELETE':
        return res.json(
          await prisma.user.delete({
            where: { id },
          }),
        )
    }

    return res
      .status(400)
      .send({ message: \`Unexpected request method: \${req.method}\` })
  } catch (e: any) {
    console.error('[user] Error responding:', e)
    return res.status(500).json({ message: e?.message || e })
  }
}",
    "path": "api/user.ts",
  },
  "package.json": Object {
    "content": "{
  \\"name\\": \\"url-shortener\\",
  \\"description\\": \\"Schema for a URL shortener with a REST API\\",
  \\"license\\": \\"UNLICENSED\\",
  \\"dependencies\\": {
    \\"@prisma/client\\": \\"3.15.2\\"
  },
  \\"devDependencies\\": {
    \\"@types/faker\\": \\"5.5.9\\",
    \\"@types/node\\": \\"17.0.21\\",
    \\"@vercel/node\\": \\"1.13.0\\",
    \\"faker\\": \\"5.5.3\\",
    \\"prisma\\": \\"3.15.2\\",
    \\"ts-node\\": \\"10.5.0\\",
    \\"typescript\\": \\"4.5.5\\"
  },
  \\"prisma\\": {
    \\"seed\\": \\"ts-node prisma/seed\\"
  },
  \\"scripts\\": {
    \\"init\\": \\"prisma db push && prisma db seed\\",
    \\"dev\\": \\"ts-node ./sandbox.ts\\"
  }
}",
    "path": "package.json",
  },
  "prisma/schema.prisma": Object {
    "content": "// Schema for a simple URL shortener
// This schema tracks short links by associating them to a user

generator client {
  provider = \\"prisma-client-js\\"
}

datasource db {
  provider = \\"postgresql\\"
  url      = env(\\"DATABASE_URL\\")
}

model Link {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String
  shortUrl  String
  userId    String?
  User      User?    @relation(fields: [userId], references: [id])
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  email     String
  links     Link[]
}",
    "path": "prisma/schema.prisma",
  },
  "prisma/seed.ts": Object {
    "content": "import { PrismaClient } from '@prisma/client'
import faker from 'faker'

const prisma = new PrismaClient()

const NUMBER_OF_USERS = 4
const MAX_NUMBER_OF_LINKS = 5

const data = Array.from({ length: NUMBER_OF_USERS }).map(() => ({
  email: faker.internet.email(),
  name: faker.name.firstName(),
  links: Array.from({
    length: faker.datatype.number({
      min: 0,
      max: MAX_NUMBER_OF_LINKS,
    }),
  }).map(() => ({
    url: faker.internet.url(),
    shortUrl: faker.internet.domainWord(),
  })),
}))

async function main() {
  for (let entry of data) {
    await prisma.user.create({
      data: {
        name: entry.name,
        email: entry.email,
        links: {
          create: entry.links,
        },
      },
    })
  }
}

main().finally(async () => {
  await prisma.$disconnect()
})",
    "path": "prisma/seed.ts",
  },
  "public/index.html": Object {
    "content": "<html>
  <head>
    <title>URL Shortener Template</title>

    <link rel=\\"icon\\" type=\\"image/svg\\" href=\\"prisma.svg\\" />
    <style>
      @font-face {
        font-family: Inter;
        font-weight: 400;
        src: url('https://cdn.jsdelivr.net/npm/@fontsource/inter/files/inter-latin-400-normal.woff2')
            format('woff2'),
          url('https://cdn.jsdelivr.net/npm/@fontsource/inter/files/inter-latin-400-normal.woff')
            format('woff');
      }

      @font-face {
        font-family: Inter;
        font-weight: 900;
        src: url('https://cdn.jsdelivr.net/npm/@fontsource/inter/files/inter-latin-900-normal.woff2')
            format('woff2'),
          url('https://cdn.jsdelivr.net/npm/@fontsource/inter/files/inter-latin-900-normal.woff')
            format('woff');
      }
    </style>

    <style>
      :root {
        --prisma-blue: #1a202c;
        --prisma-blue-lighter: #2b3853;
        --white: #ffffff;
        --green: #34d399;
        --black: #000000;
        --gray: rgba(0, 0, 0, 0.75);
      }
    </style>

    <style>
      body {
        margin: 0;
        padding: 0;
        font-size: 16px;
      }
      * {
        box-sizing: border-box;
      }
      h1,
      h2,
      h3,
      h4,
      h5,
      h6,
      p {
        margin: 0;
      }

      #hero {
        background: var(--prisma-blue);
        background: linear-gradient(
          -135deg,
          var(--prisma-blue) 0%,
          var(--prisma-blue-lighter) 100%
        );
        height: 60%;
        color: var(--white);
        font-family: Inter, sans-serif;
        display: flex;
        flex-direction: column;
        align-items: center;
      }

      #prisma-logo {
        padding: 50px;
      }

      #hero-text {
        display: flex;
        flex-direction: column;
        align-items: center;
        flex: 1;
      }

      #title {
        font-size: 72px;
        font-weight: 900;
        line-height: 1;
      }

      #subtitle {
        font-size: 24px;
        font-weight: 400;
        margin: 20px;
      }
      #subtitle a {
        color: var(--white) !important;
      }

      #docs {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        margin: 0 auto;
        width: 100%;
        padding: 40px;
      }

      #docs .title {
        color: var(--gray);
        font-family: Inter, sans-serif;
        font-weight: 900;
        margin-bottom: 20px;
      }

      #docs article {
        font-family: monospace;
        margin: 40px;
      }
      #docs article h3 {
        font-family: monospace;
        font-size: 24px;
        color: var(--gray);
        text-align: center;
      }

      #docs article ul {
        list-style: none;
      }

      #docs article ul li {
        display: grid;
        grid-template-columns: 1fr 2fr 3fr;
        margin: 10px;
      }
      #docs article ul li .method {
        color: var(--green);
        text-align: right;
        grid-column: 1 / 2;
        margin-right: 20px;
      }
      #docs article ul li .url {
        color: var(--black);
        grid-column: 2 / 3;
        margin-right: 60px;
      }
      #docs article ul li .description {
        color: var(--gray);
        grid-column: 3 / 4;
      }
    </style>
  </head>

  <body>
    <section id=\\"hero\\">
      <header style=\\"flex: 1\\">
        <img src=\\"prisma.svg\\" alt=\\"Prisma logo\\" id=\\"prisma-logo\\" />
      </header>
      <div id=\\"hero-text\\">
        <h1 id=\\"title\\">URL Shortener Template</h1>
        <h3 id=\\"subtitle\\">
          Generated by
          <a href=\\"https://cloud.prisma.io\\" target=\\"_blank\\"
            >Prisma Data Platform</a
          >
        </h3>
      </div>
      <div style=\\"flex: 1\\"></div>
    </section>

    <section id=\\"docs\\">
      <h1 class=\\"title\\">API Endpoints</h1>
    </section>

    <script>
      const docs = [
        {
          model: 'User',
          endpoints: [
            {
              method: 'GET',
              url: '/api/user',
              description: 'Get all users',
            },
            {
              method: 'GET',
              url: '/api/user?id=:id',
              description: 'Get a single user',
            },
            {
              method: 'POST',
              url: '/api/userd',
              description: 'Create a single user',
            },
            {
              method: 'PUT',
              url: '/api/user?id=:id',
              description: 'Update a single user',
            },
            {
              method: 'DELETE',
              url: '/api/user?id=:id',
              description: 'Delete a single user',
            },
          ],
        },
        {
          model: 'Link',
          endpoints: [
            {
              method: 'GET',
              url: '/api/link',
              description: 'Get all links',
            },
            {
              method: 'GET',
              url: '/api/link?id=:id',
              description: 'Get a single link',
            },
            {
              method: 'POST',
              url: '/api/link',
              description: 'Create a single link',
            },
            {
              method: 'PUT',
              url: '/api/link?id=:id',
              description: 'Update a single link',
            },
            {
              method: 'DELETE',
              url: '/api/link?id=:id',
              description: 'Delete a single link',
            },
          ],
        },
      ]

      // Rendering
      const container = document.getElementById('docs')

      for (const group of docs) {
        const article = document.createElement('article')

        const title = document.createElement('h3')
        title.innerText = group.model
        article.appendChild(title)

        const ul = document.createElement('ul')
        for (const endpoint of group.endpoints) {
          const li = document.createElement('li')
          li.classList.add('endpoint')

          const method = document.createElement('p')
          method.classList.add('method')
          method.innerText = endpoint.method
          li.appendChild(method)

          const url = document.createElement('p')
          url.classList.add('url')
          url.innerText = endpoint.url
          li.appendChild(url)

          const description = document.createElement('p')
          description.classList.add('description')
          description.innerText = endpoint.description
          li.appendChild(description)

          ul.appendChild(li)
        }
        article.appendChild(ul)

        container.appendChild(article)
      }
    </script>
  </body>
</html>",
    "path": "public/index.html",
  },
  "public/prisma.svg": Object {
    "content": "<svg width=\\"32\\" height=\\"40\\" viewBox=\\"0 0 32 40\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">
<path fill-rule=\\"evenodd\\" clip-rule=\\"evenodd\\" d=\\"M0.28825 24.9389C-0.101619 25.5764 -0.0955847 26.3808 0.303803 27.0124L7.5326 38.4434C8.00176 39.1853 8.90609 39.5236 9.74539 39.2712L30.606 32.9977C31.7444 32.6554 32.3172 31.3823 31.8196 30.3003L18.4094 1.13932C17.7554 -0.282788 15.7839 -0.399522 14.9675 0.935524L0.28825 24.9389ZM18.1058 7.79741C17.8205 7.13653 16.854 7.23832 16.7124 7.94418L11.5428 33.7038C11.4338 34.247 11.9419 34.7108 12.4724 34.5524L26.9042 30.2411C27.3254 30.1153 27.5424 29.6497 27.368 29.2458L18.1058 7.79741Z\\" fill=\\"white\\"/>
</svg>",
    "path": "public/prisma.svg",
  },
  "sandbox.ts": Object {
    "content": "import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

const main = async () => {
  const users = await prisma.user.findMany({
    where: {
      name: {
        startsWith: 'A',
      },
    },
  })

  console.log('Top users (alphabetical): ', users)
}

main()
  .catch((e) => console.error('Error in Prisma Client query: ', e))
  .finally(async () => await prisma.$disconnect())",
    "path": "sandbox.ts",
  },
  "tsconfig.json": Object {
    "content": "{
  \\"compilerOptions\\": {
    \\"sourceMap\\": true,
    \\"outDir\\": \\"dist\\",
    \\"strict\\": true,
    \\"lib\\": [\\"esnext\\", \\"dom\\"],
    \\"esModuleInterop\\": true
  }
}",
    "path": "tsconfig.json",
  },
}
`;

exports[`metadata Blog 1`] = `
Object {
  "description": "Schema for a blog built with Next.js",
  "displayName": "Blog",
  "githubUrl": "https://github.com/prisma/prisma-schema-examples/tree/main/Blog",
  "handles": Object {
    "camel": "nextjs",
    "kebab": "nextjs",
    "pascal": "Nextjs",
    "snake": "nextjs",
    "upper": "NEXTJS",
  },
}
`;

exports[`metadata Empty 1`] = `
Object {
  "description": "An empty schema with no models, to build your own your own schema",
  "displayName": "Empty",
  "githubUrl": "https://github.com/prisma/prisma-schema-examples/tree/main/Empty",
  "handles": Object {
    "camel": "empty",
    "kebab": "empty",
    "pascal": "Empty",
    "snake": "empty",
    "upper": "EMPTY",
  },
}
`;

exports[`metadata Music Streaming Service 1`] = `
Object {
  "description": "Schema for a fictional music streaming service with a REST API",
  "displayName": "Music Streaming Service",
  "githubUrl": "https://github.com/prisma/prisma-schema-examples/tree/main/Music Streaming Service",
  "handles": Object {
    "camel": "musicStreamingService",
    "kebab": "music-streaming-service",
    "pascal": "MusicStreamingService",
    "snake": "music_streaming_service",
    "upper": "MUSIC_STREAMING_SERVICE",
  },
}
`;

exports[`metadata Rentals Platform 1`] = `
Object {
  "description": "Schema for a fictional hotel with a REST API",
  "displayName": "Rentals Platform",
  "githubUrl": "https://github.com/prisma/prisma-schema-examples/tree/main/Rentals Platform",
  "handles": Object {
    "camel": "rentalsPlatform",
    "kebab": "rentals-platform",
    "pascal": "RentalsPlatform",
    "snake": "rentals_platform",
    "upper": "RENTALS_PLATFORM",
  },
}
`;

exports[`metadata SaaS 1`] = `
Object {
  "description": "Schema for an identity service for a SaaS with a REST API",
  "displayName": "SaaS",
  "githubUrl": "https://github.com/prisma/prisma-schema-examples/tree/main/SaaS",
  "handles": Object {
    "camel": "saas",
    "kebab": "saas",
    "pascal": "Saas",
    "snake": "saas",
    "upper": "SAAS",
  },
}
`;

exports[`metadata URL Shortener 1`] = `
Object {
  "description": "Schema for a URL shortener with a REST API",
  "displayName": "URL Shortener",
  "githubUrl": "https://github.com/prisma/prisma-schema-examples/tree/main/URL Shortener",
  "handles": Object {
    "camel": "urlShortener",
    "kebab": "url-shortener",
    "pascal": "UrlShortener",
    "snake": "url_shortener",
    "upper": "URL_SHORTENER",
  },
}
`;
